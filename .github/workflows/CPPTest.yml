name: 'C++ Test'

on: [push, pull_request]

env:
  tests_path: Sources/Tests/CPPWrapperUnitTests/tests

jobs:
  Testing:
    strategy:
      matrix:
        include:
          - os: windows-latest
            flag: win-x64
            from: AngouriMath.CPP.Exporting.dll
            to: AngouriMath.CPP.Exporting.dll
          - os: ubuntu-latest
            flag: linux-x64
            from: AngouriMath.CPP.Exporting.so
            to: libAngouriMath.CPP.Exporting.so
          - os: macos-latest
            flag: osx-x64
            from: AngouriMath.CPP.Exporting.so
            to: libAngouriMath.CPP.Exporting.so

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.100'
        
    - name: 'Building the library into native'
      run: |
        cd Sources/Wrappers/AngouriMath.CPP.Exporting
        mkdir ../AngouriMath.CPP.Importing/out-x64
        dotnet publish -p:NativeLib=Shared -p:SelfContained=true -r ${{ matrix.flag }} -c release        

    - name: 'Preparing tests'
      run: |
        cd ${{ env.tests_path }}
        cmake -S . -B build
        mkdir "build/Debug"

    - name: 'Copying the library for Windows'
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cd ${{ env.tests_path }}
        copy "..\..\..\Wrappers\AngouriMath.CPP.Importing\out-x64\AngouriMath.CPP.Exporting.dll" "build\Debug\AngouriMath.CPP.Exporting.dll"

    - name: 'Copying the library for Linux'
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        cd ${{ env.tests_path }}
        cp -a "../../../Wrappers/AngouriMath.CPP.Importing/out-x64/AngouriMath.CPP.Exporting.so" "build/Debug/libAngouriMath.CPP.Exporting.so"

    - name: 'Copying the library for OS X'
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        cd ${{ env.tests_path }}
        cp -r "../../../Wrappers/AngouriMath.CPP.Importing/out-x64/AngouriMath.CPP.Exporting.so" "build/Debug/libAngouriMath.CPP.Exporting.so"

    - name: 'Building and running tests'
        cmake --build build
        cd build
        ctest
