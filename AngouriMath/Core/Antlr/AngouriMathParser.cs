//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./AngouriMath.g by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AngouriMath.Core.Antlr {

    using System.Linq;
    using AngouriMath;
    using static AngouriMath.Core.Exceptions.FunctionArgumentCountException;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AngouriMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, NOT=37, AND=38, NEWLINE=39, 
		NUMBER=40, VARIABLE=41, COMMENT=42, WS=43;
	public const int
		RULE_factorial_expression = 0, RULE_power_list = 1, RULE_power_expression = 2, 
		RULE_unary_expression = 3, RULE_mult_expression = 4, RULE_sum_expression = 5, 
		RULE_negate_expression = 6, RULE_and_expression = 7, RULE_expression = 8, 
		RULE_function_arguments = 9, RULE_atom = 10, RULE_statement = 11;
	public static readonly string[] ruleNames = {
		"factorial_expression", "power_list", "power_expression", "unary_expression", 
		"mult_expression", "sum_expression", "negate_expression", "and_expression", 
		"expression", "function_arguments", "atom", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'^'", "'-'", "'+'", "'*'", "'/'", "','", "'('", "')'", "'sin('", 
		"'cos('", "'log('", "'sqrt('", "'cbrt('", "'sqr('", "'ln('", "'tan('", 
		"'cotan('", "'sec('", "'cosec('", "'arcsin('", "'arccos('", "'arctan('", 
		"'arccotan('", "'arcsec('", "'arccosec('", "'gamma('", "'derivative('", 
		"'integral('", "'limit('", "'limitleft('", "'limitright('", "'signum('", 
		"'sgn('", "'sign('", "'abs('", "'not'", "'and'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NOT", "AND", "NEWLINE", "NUMBER", "VARIABLE", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AngouriMath.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AngouriMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    // Nullable reference type analysis is disabled by default for generated code without '#nullable enable'
	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }

		public AngouriMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AngouriMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class Factorial_expressionContext : ParserRuleContext {
		public Entity value;
		public AtomContext p;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Factorial_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorial_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFactorial_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFactorial_expression(this);
		}
	}

	[RuleVersion(0)]
	public Factorial_expressionContext factorial_expression() {
		Factorial_expressionContext _localctx = new Factorial_expressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_factorial_expression);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; _localctx.p = atom();
				State = 25; Match(T__0);
				 _localctx.value =  MathS.Factorial(_localctx.p.value); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; _localctx.p = atom();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_listContext : ParserRuleContext {
		public List<Entity> value;
		public Factorial_expressionContext _factorial_expression;
		public Factorial_expressionContext[] factorial_expression() {
			return GetRuleContexts<Factorial_expressionContext>();
		}
		public Factorial_expressionContext factorial_expression(int i) {
			return GetRuleContext<Factorial_expressionContext>(i);
		}
		public Power_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_list(this);
		}
	}

	[RuleVersion(0)]
	public Power_listContext power_list() {
		Power_listContext _localctx = new Power_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_power_list);
		 _localctx.value =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 33; Match(T__1);
				State = 34; _localctx._factorial_expression = factorial_expression();
				 _localctx.value.Add(_localctx._factorial_expression.value); 
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_expressionContext : ParserRuleContext {
		public Entity value;
		public Factorial_expressionContext _factorial_expression;
		public Power_listContext _power_list;
		public Factorial_expressionContext factorial_expression() {
			return GetRuleContext<Factorial_expressionContext>(0);
		}
		public Power_listContext power_list() {
			return GetRuleContext<Power_listContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_power_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; _localctx._factorial_expression = factorial_expression();
			 _localctx.value =  _localctx._factorial_expression.value; 
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 43; _localctx._power_list = power_list();

				        var list = _localctx._power_list.value;
				        _localctx.value =  list.Last();
				        list.RemoveAt(list.Count - 1);
				        list.Reverse(); 
				        list.Add(_localctx._factorial_expression.value);
				        foreach(var p in list) { _localctx.value =  MathS.Pow(p, _localctx.value); }
				    
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Unary_expressionContext : ParserRuleContext {
		public Entity value;
		public Power_expressionContext p;
		public Unary_expressionContext u;
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unary_expression);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 48; Match(T__2);
					State = 49; _localctx.p = power_expression();
					 _localctx.value =  -_localctx.p.value; 
					}
					break;
				case T__3:
					{
					State = 52; Match(T__3);
					State = 53; _localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 58; Match(T__2);
					State = 59; _localctx.u = unary_expression();
					 _localctx.value =  -_localctx.u.value; 
					}
					break;
				case T__3:
					{
					State = 62; Match(T__3);
					State = 63; _localctx.u = unary_expression();
					 _localctx.value =  _localctx.u.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; _localctx.p = power_expression();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Mult_expressionContext : ParserRuleContext {
		public Entity value;
		public Unary_expressionContext u1;
		public Unary_expressionContext u2;
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; _localctx.u1 = unary_expression();
			 _localctx.value =  _localctx.u1.value; 
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__5) {
				{
				State = 83;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 75; Match(T__4);
					State = 76; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value * _localctx.u2.value; 
					}
					break;
				case T__5:
					{
					State = 79; Match(T__5);
					State = 80; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value / _localctx.u2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Sum_expressionContext : ParserRuleContext {
		public Entity value;
		public Mult_expressionContext m1;
		public Mult_expressionContext m2;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_sum_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; _localctx.m1 = mult_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				State = 98;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 90; Match(T__3);
					State = 91; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value + _localctx.m2.value; 
					}
					break;
				case T__2:
					{
					State = 94; Match(T__2);
					State = 95; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value - _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Negate_expressionContext : ParserRuleContext {
		public Entity value;
		public Sum_expressionContext _sum_expression;
		public Negate_expressionContext _negate_expression;
		public ITerminalNode NOT() { return GetToken(AngouriMathParser.NOT, 0); }
		public Sum_expressionContext sum_expression() {
			return GetRuleContext<Sum_expressionContext>(0);
		}
		public Negate_expressionContext negate_expression() {
			return GetRuleContext<Negate_expressionContext>(0);
		}
		public Negate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterNegate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitNegate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Negate_expressionContext negate_expression() {
		Negate_expressionContext _localctx = new Negate_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_negate_expression);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; Match(NOT);
				State = 104; _localctx._sum_expression = sum_expression();
				 _localctx.value =  !_localctx._sum_expression.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; Match(NOT);
				State = 108; _localctx._negate_expression = negate_expression();
				 _localctx.value =  !_localctx._negate_expression.value; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111; _localctx._sum_expression = sum_expression();
				 _localctx.value =  _localctx._sum_expression.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class And_expressionContext : ParserRuleContext {
		public Entity value;
		public Negate_expressionContext m1;
		public Negate_expressionContext m2;
		public Negate_expressionContext m;
		public ITerminalNode AND() { return GetToken(AngouriMathParser.AND, 0); }
		public Negate_expressionContext[] negate_expression() {
			return GetRuleContexts<Negate_expressionContext>();
		}
		public Negate_expressionContext negate_expression(int i) {
			return GetRuleContext<Negate_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_and_expression);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; _localctx.m1 = negate_expression();
				 _localctx.value =  _localctx.m1.value; 
				State = 118; Match(AND);
				State = 119; _localctx.m2 = negate_expression();
				 _localctx.value =  _localctx.value & _localctx.m2.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; _localctx.m = negate_expression();
				 _localctx.value =  _localctx.m.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		public Entity value;
		public Negate_expressionContext s;
		public Negate_expressionContext negate_expression() {
			return GetRuleContext<Negate_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; _localctx.s = negate_expression();
			 _localctx.value =  _localctx.s.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Function_argumentsContext : ParserRuleContext {
		public List<Entity> list;
		public ExpressionContext e;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_arguments);
		 _localctx.list =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << NOT) | (1L << NUMBER) | (1L << VARIABLE))) != 0)) {
				{
				State = 130; _localctx.e = expression();
				 _localctx.list.Add(_localctx.e.value); 
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 132; Match(T__6);
					State = 133; _localctx.e = expression();
					 _localctx.list.Add(_localctx.e.value); 
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		public Entity value;
		public IToken _NUMBER;
		public IToken _VARIABLE;
		public ExpressionContext _expression;
		public Function_argumentsContext args;
		public ITerminalNode NUMBER() { return GetToken(AngouriMathParser.NUMBER, 0); }
		public ITerminalNode VARIABLE() { return GetToken(AngouriMathParser.VARIABLE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 20, RULE_atom);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; _localctx._NUMBER = Match(NUMBER);
				 _localctx.value =  Entity.Number.Complex.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)); 
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; _localctx._VARIABLE = Match(VARIABLE);
				 _localctx.value =  Entity.Variable.CreateVariableUnchecked((_localctx._VARIABLE!=null?_localctx._VARIABLE.Text:null)); 
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; Match(T__7);
				State = 148; _localctx._expression = expression();
				State = 149; Match(T__8);
				 _localctx.value =  _localctx._expression.value; 
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 152; Match(T__9);
				State = 153; _localctx.args = function_arguments();
				State = 154; Match(T__8);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sin(_localctx.args.list[0]); 
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 157; Match(T__10);
				State = 158; _localctx.args = function_arguments();
				State = 159; Match(T__8);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cos(_localctx.args.list[0]); 
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162; Match(T__11);
				State = 163; _localctx.args = function_arguments();
				State = 164; Match(T__8);
				 _localctx.value =  Assert("log", (1, 2), _localctx.args.list.Count) ? MathS.Log(10, _localctx.args.list[0]) : MathS.Log(_localctx.args.list[0], _localctx.args.list[1]); 
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 7);
				{
				State = 167; Match(T__12);
				State = 168; _localctx.args = function_arguments();
				State = 169; Match(T__8);
				 Assert("sqrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqrt(_localctx.args.list[0]); 
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 8);
				{
				State = 172; Match(T__13);
				State = 173; _localctx.args = function_arguments();
				State = 174; Match(T__8);
				 Assert("cbrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cbrt(_localctx.args.list[0]); 
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 9);
				{
				State = 177; Match(T__14);
				State = 178; _localctx.args = function_arguments();
				State = 179; Match(T__8);
				 Assert("sqr", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqr(_localctx.args.list[0]); 
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 10);
				{
				State = 182; Match(T__15);
				State = 183; _localctx.args = function_arguments();
				State = 184; Match(T__8);
				 Assert("ln", 1, _localctx.args.list.Count); _localctx.value =  MathS.Ln(_localctx.args.list[0]); 
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 11);
				{
				State = 187; Match(T__16);
				State = 188; _localctx.args = function_arguments();
				State = 189; Match(T__8);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Tan(_localctx.args.list[0]); 
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 12);
				{
				State = 192; Match(T__17);
				State = 193; _localctx.args = function_arguments();
				State = 194; Match(T__8);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 13);
				{
				State = 197; Match(T__18);
				State = 198; _localctx.args = function_arguments();
				State = 199; Match(T__8);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sec(_localctx.args.list[0]); 
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 14);
				{
				State = 202; Match(T__19);
				State = 203; _localctx.args = function_arguments();
				State = 204; Match(T__8);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 15);
				{
				State = 207; Match(T__20);
				State = 208; _localctx.args = function_arguments();
				State = 209; Match(T__8);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 16);
				{
				State = 212; Match(T__21);
				State = 213; _localctx.args = function_arguments();
				State = 214; Match(T__8);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 17);
				{
				State = 217; Match(T__22);
				State = 218; _localctx.args = function_arguments();
				State = 219; Match(T__8);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 18);
				{
				State = 222; Match(T__23);
				State = 223; _localctx.args = function_arguments();
				State = 224; Match(T__8);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 19);
				{
				State = 227; Match(T__24);
				State = 228; _localctx.args = function_arguments();
				State = 229; Match(T__8);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 20);
				{
				State = 232; Match(T__25);
				State = 233; _localctx.args = function_arguments();
				State = 234; Match(T__8);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 21);
				{
				State = 237; Match(T__26);
				State = 238; _localctx.args = function_arguments();
				State = 239; Match(T__8);
				 Assert("gamma", 1, _localctx.args.list.Count); _localctx.value =  MathS.Gamma(_localctx.args.list[0]); 
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 22);
				{
				State = 242; Match(T__27);
				State = 243; _localctx.args = function_arguments();
				State = 244; Match(T__8);
				 Assert("derivative", 3, _localctx.args.list.Count); _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 23);
				{
				State = 247; Match(T__28);
				State = 248; _localctx.args = function_arguments();
				State = 249; Match(T__8);
				 Assert("integral", 3, _localctx.args.list.Count); _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 24);
				{
				State = 252; Match(T__29);
				State = 253; _localctx.args = function_arguments();
				State = 254; Match(T__8);
				 Assert("limit", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 25);
				{
				State = 257; Match(T__30);
				State = 258; _localctx.args = function_arguments();
				State = 259; Match(T__8);
				 Assert("limitleft", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Left); 
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 26);
				{
				State = 262; Match(T__31);
				State = 263; _localctx.args = function_arguments();
				State = 264; Match(T__8);
				 Assert("limitright", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Right); 
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 27);
				{
				State = 267; Match(T__32);
				State = 268; _localctx.args = function_arguments();
				State = 269; Match(T__8);
				 Assert("signum", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 28);
				{
				State = 272; Match(T__33);
				State = 273; _localctx.args = function_arguments();
				State = 274; Match(T__8);
				 Assert("sgn", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 29);
				{
				State = 277; Match(T__34);
				State = 278; _localctx.args = function_arguments();
				State = 279; Match(T__8);
				 Assert("sign", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 30);
				{
				State = 282; Match(T__35);
				State = 283; _localctx.args = function_arguments();
				State = 284; Match(T__8);
				 Assert("abs", 1, _localctx.args.list.Count); _localctx.value =  MathS.Abs(_localctx.args.list[0]); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AngouriMathParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; _localctx._expression = expression();
			State = 290; Match(Eof);
			 Result = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x128', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\"', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', '(', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', ')', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x31', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', ';', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'J', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'V', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'Y', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x65', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'h', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'u', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x80', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x8B', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x8E', '\v', '\v', '\x5', '\v', '\x90', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x122', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x2', '\x2', '\x2', '\x148', '\x2', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', '+', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'I', '\x3', '\x2', '\x2', '\x2', '\n', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'Z', '\x3', '\x2', '\x2', '\x2', '\xE', 
		't', '\x3', '\x2', '\x2', '\x2', '\x10', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x81', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x121', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\x16', '\f', 
		'\x2', '\x1B', '\x1C', '\a', '\x3', '\x2', '\x2', '\x1C', '\x1D', '\b', 
		'\x2', '\x1', '\x2', '\x1D', '\"', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\x5', '\x16', '\f', '\x2', '\x1F', ' ', '\b', '\x2', '\x1', '\x2', 
		' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x1E', '\x3', '\x2', '\x2', '\x2', '\"', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\a', '\x4', '\x2', '\x2', '$', '%', '\x5', '\x2', 
		'\x2', '\x2', '%', '&', '\b', '\x3', '\x1', '\x2', '&', '(', '\x3', '\x2', 
		'\x2', '\x2', '\'', '#', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', 
		',', '\x5', '\x2', '\x2', '\x2', ',', '\x30', '\b', '\x4', '\x1', '\x2', 
		'-', '.', '\x5', '\x4', '\x3', '\x2', '.', '/', '\b', '\x4', '\x1', '\x2', 
		'/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\x5', '\x2', '\x2', '\x33', 
		'\x34', '\x5', '\x6', '\x4', '\x2', '\x34', '\x35', '\b', '\x5', '\x1', 
		'\x2', '\x35', ';', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 
		'\x6', '\x2', '\x2', '\x37', '\x38', '\x5', '\x6', '\x4', '\x2', '\x38', 
		'\x39', '\b', '\x5', '\x1', '\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', 
		':', '\x32', '\x3', '\x2', '\x2', '\x2', ':', '\x36', '\x3', '\x2', '\x2', 
		'\x2', ';', 'J', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\x5', '\x2', 
		'\x2', '=', '>', '\x5', '\b', '\x5', '\x2', '>', '?', '\b', '\x5', '\x1', 
		'\x2', '?', '\x45', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\x6', 
		'\x2', '\x2', '\x41', '\x42', '\x5', '\b', '\x5', '\x2', '\x42', '\x43', 
		'\b', '\x5', '\x1', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '<', '\x3', '\x2', '\x2', '\x2', '\x44', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'J', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x5', '\x6', 
		'\x4', '\x2', 'G', 'H', '\b', '\x5', '\x1', '\x2', 'H', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'I', ':', '\x3', '\x2', '\x2', '\x2', 'I', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\b', '\x5', '\x2', 'L', 
		'W', '\b', '\x6', '\x1', '\x2', 'M', 'N', '\a', '\a', '\x2', '\x2', 'N', 
		'O', '\x5', '\b', '\x5', '\x2', 'O', 'P', '\b', '\x6', '\x1', '\x2', 'P', 
		'V', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\b', '\x2', '\x2', 'R', 
		'S', '\x5', '\b', '\x5', '\x2', 'S', 'T', '\b', '\x6', '\x1', '\x2', 'T', 
		'V', '\x3', '\x2', '\x2', '\x2', 'U', 'M', '\x3', '\x2', '\x2', '\x2', 
		'U', 'Q', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', '\v', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x5', '\n', '\x6', '\x2', '[', '\x66', '\b', '\a', '\x1', 
		'\x2', '\\', ']', '\a', '\x6', '\x2', '\x2', ']', '^', '\x5', '\n', '\x6', 
		'\x2', '^', '_', '\b', '\a', '\x1', '\x2', '_', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\a', '\x5', '\x2', '\x2', '\x61', '\x62', 
		'\x5', '\n', '\x6', '\x2', '\x62', '\x63', '\b', '\a', '\x1', '\x2', '\x63', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x64', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\r', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\'', '\x2', '\x2', 
		'j', 'k', '\x5', '\f', '\a', '\x2', 'k', 'l', '\b', '\b', '\x1', '\x2', 
		'l', 'u', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\'', '\x2', '\x2', 
		'n', 'o', '\x5', '\xE', '\b', '\x2', 'o', 'p', '\b', '\b', '\x1', '\x2', 
		'p', 'u', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x5', '\f', '\a', '\x2', 
		'r', 's', '\b', '\b', '\x1', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 
		't', 'i', '\x3', '\x2', '\x2', '\x2', 't', 'm', '\x3', '\x2', '\x2', '\x2', 
		't', 'q', '\x3', '\x2', '\x2', '\x2', 'u', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x5', '\xE', '\b', '\x2', 'w', 'x', '\b', '\t', '\x1', 
		'\x2', 'x', 'y', '\a', '(', '\x2', '\x2', 'y', 'z', '\x5', '\xE', '\b', 
		'\x2', 'z', '{', '\b', '\t', '\x1', '\x2', '{', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x5', '\xE', '\b', '\x2', '}', '~', '\b', '\t', 
		'\x1', '\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x5', '\xE', '\b', 
		'\x2', '\x82', '\x83', '\b', '\n', '\x1', '\x2', '\x83', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '\x12', '\n', '\x2', '\x85', 
		'\x8C', '\b', '\v', '\x1', '\x2', '\x86', '\x87', '\a', '\t', '\x2', '\x2', 
		'\x87', '\x88', '\x5', '\x12', '\n', '\x2', '\x88', '\x89', '\b', '\v', 
		'\x1', '\x2', '\x89', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\a', '*', '\x2', '\x2', '\x92', '\x122', 
		'\b', '\f', '\x1', '\x2', '\x93', '\x94', '\a', '+', '\x2', '\x2', '\x94', 
		'\x122', '\b', '\f', '\x1', '\x2', '\x95', '\x96', '\a', '\n', '\x2', 
		'\x2', '\x96', '\x97', '\x5', '\x12', '\n', '\x2', '\x97', '\x98', '\a', 
		'\v', '\x2', '\x2', '\x98', '\x99', '\b', '\f', '\x1', '\x2', '\x99', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\f', '\x2', 
		'\x2', '\x9B', '\x9C', '\x5', '\x14', '\v', '\x2', '\x9C', '\x9D', '\a', 
		'\v', '\x2', '\x2', '\x9D', '\x9E', '\b', '\f', '\x1', '\x2', '\x9E', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\r', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x14', '\v', '\x2', '\xA1', '\xA2', '\a', 
		'\v', '\x2', '\x2', '\xA2', '\xA3', '\b', '\f', '\x1', '\x2', '\xA3', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\xE', '\x2', 
		'\x2', '\xA5', '\xA6', '\x5', '\x14', '\v', '\x2', '\xA6', '\xA7', '\a', 
		'\v', '\x2', '\x2', '\xA7', '\xA8', '\b', '\f', '\x1', '\x2', '\xA8', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\xF', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '\x14', '\v', '\x2', '\xAB', '\xAC', '\a', 
		'\v', '\x2', '\x2', '\xAC', '\xAD', '\b', '\f', '\x1', '\x2', '\xAD', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x10', '\x2', 
		'\x2', '\xAF', '\xB0', '\x5', '\x14', '\v', '\x2', '\xB0', '\xB1', '\a', 
		'\v', '\x2', '\x2', '\xB1', '\xB2', '\b', '\f', '\x1', '\x2', '\xB2', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x11', '\x2', 
		'\x2', '\xB4', '\xB5', '\x5', '\x14', '\v', '\x2', '\xB5', '\xB6', '\a', 
		'\v', '\x2', '\x2', '\xB6', '\xB7', '\b', '\f', '\x1', '\x2', '\xB7', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x12', '\x2', 
		'\x2', '\xB9', '\xBA', '\x5', '\x14', '\v', '\x2', '\xBA', '\xBB', '\a', 
		'\v', '\x2', '\x2', '\xBB', '\xBC', '\b', '\f', '\x1', '\x2', '\xBC', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x13', '\x2', 
		'\x2', '\xBE', '\xBF', '\x5', '\x14', '\v', '\x2', '\xBF', '\xC0', '\a', 
		'\v', '\x2', '\x2', '\xC0', '\xC1', '\b', '\f', '\x1', '\x2', '\xC1', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x14', '\x2', 
		'\x2', '\xC3', '\xC4', '\x5', '\x14', '\v', '\x2', '\xC4', '\xC5', '\a', 
		'\v', '\x2', '\x2', '\xC5', '\xC6', '\b', '\f', '\x1', '\x2', '\xC6', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x15', '\x2', 
		'\x2', '\xC8', '\xC9', '\x5', '\x14', '\v', '\x2', '\xC9', '\xCA', '\a', 
		'\v', '\x2', '\x2', '\xCA', '\xCB', '\b', '\f', '\x1', '\x2', '\xCB', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x16', '\x2', 
		'\x2', '\xCD', '\xCE', '\x5', '\x14', '\v', '\x2', '\xCE', '\xCF', '\a', 
		'\v', '\x2', '\x2', '\xCF', '\xD0', '\b', '\f', '\x1', '\x2', '\xD0', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x17', '\x2', 
		'\x2', '\xD2', '\xD3', '\x5', '\x14', '\v', '\x2', '\xD3', '\xD4', '\a', 
		'\v', '\x2', '\x2', '\xD4', '\xD5', '\b', '\f', '\x1', '\x2', '\xD5', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x18', '\x2', 
		'\x2', '\xD7', '\xD8', '\x5', '\x14', '\v', '\x2', '\xD8', '\xD9', '\a', 
		'\v', '\x2', '\x2', '\xD9', '\xDA', '\b', '\f', '\x1', '\x2', '\xDA', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x19', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '\x14', '\v', '\x2', '\xDD', '\xDE', '\a', 
		'\v', '\x2', '\x2', '\xDE', '\xDF', '\b', '\f', '\x1', '\x2', '\xDF', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x1A', '\x2', 
		'\x2', '\xE1', '\xE2', '\x5', '\x14', '\v', '\x2', '\xE2', '\xE3', '\a', 
		'\v', '\x2', '\x2', '\xE3', '\xE4', '\b', '\f', '\x1', '\x2', '\xE4', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x1B', '\x2', 
		'\x2', '\xE6', '\xE7', '\x5', '\x14', '\v', '\x2', '\xE7', '\xE8', '\a', 
		'\v', '\x2', '\x2', '\xE8', '\xE9', '\b', '\f', '\x1', '\x2', '\xE9', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x1C', '\x2', 
		'\x2', '\xEB', '\xEC', '\x5', '\x14', '\v', '\x2', '\xEC', '\xED', '\a', 
		'\v', '\x2', '\x2', '\xED', '\xEE', '\b', '\f', '\x1', '\x2', '\xEE', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x1D', '\x2', 
		'\x2', '\xF0', '\xF1', '\x5', '\x14', '\v', '\x2', '\xF1', '\xF2', '\a', 
		'\v', '\x2', '\x2', '\xF2', '\xF3', '\b', '\f', '\x1', '\x2', '\xF3', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x1E', '\x2', 
		'\x2', '\xF5', '\xF6', '\x5', '\x14', '\v', '\x2', '\xF6', '\xF7', '\a', 
		'\v', '\x2', '\x2', '\xF7', '\xF8', '\b', '\f', '\x1', '\x2', '\xF8', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x1F', '\x2', 
		'\x2', '\xFA', '\xFB', '\x5', '\x14', '\v', '\x2', '\xFB', '\xFC', '\a', 
		'\v', '\x2', '\x2', '\xFC', '\xFD', '\b', '\f', '\x1', '\x2', '\xFD', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', ' ', '\x2', 
		'\x2', '\xFF', '\x100', '\x5', '\x14', '\v', '\x2', '\x100', '\x101', 
		'\a', '\v', '\x2', '\x2', '\x101', '\x102', '\b', '\f', '\x1', '\x2', 
		'\x102', '\x122', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', 
		'!', '\x2', '\x2', '\x104', '\x105', '\x5', '\x14', '\v', '\x2', '\x105', 
		'\x106', '\a', '\v', '\x2', '\x2', '\x106', '\x107', '\b', '\f', '\x1', 
		'\x2', '\x107', '\x122', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\a', '\"', '\x2', '\x2', '\x109', '\x10A', '\x5', '\x14', '\v', '\x2', 
		'\x10A', '\x10B', '\a', '\v', '\x2', '\x2', '\x10B', '\x10C', '\b', '\f', 
		'\x1', '\x2', '\x10C', '\x122', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\a', '#', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x14', '\v', '\x2', 
		'\x10F', '\x110', '\a', '\v', '\x2', '\x2', '\x110', '\x111', '\b', '\f', 
		'\x1', '\x2', '\x111', '\x122', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\a', '$', '\x2', '\x2', '\x113', '\x114', '\x5', '\x14', '\v', '\x2', 
		'\x114', '\x115', '\a', '\v', '\x2', '\x2', '\x115', '\x116', '\b', '\f', 
		'\x1', '\x2', '\x116', '\x122', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', 
		'\a', '%', '\x2', '\x2', '\x118', '\x119', '\x5', '\x14', '\v', '\x2', 
		'\x119', '\x11A', '\a', '\v', '\x2', '\x2', '\x11A', '\x11B', '\b', '\f', 
		'\x1', '\x2', '\x11B', '\x122', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', '&', '\x2', '\x2', '\x11D', '\x11E', '\x5', '\x14', '\v', '\x2', 
		'\x11E', '\x11F', '\a', '\v', '\x2', '\x2', '\x11F', '\x120', '\b', '\f', 
		'\x1', '\x2', '\x120', '\x122', '\x3', '\x2', '\x2', '\x2', '\x121', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x95', '\x3', '\x2', '\x2', '\x2', '\x121', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x121', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x121', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x121', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x121', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x121', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\xE0', '\x3', '\x2', '\x2', '\x2', '\x121', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x121', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x121', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x103', '\x3', '\x2', '\x2', '\x2', '\x121', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x112', '\x3', '\x2', '\x2', '\x2', '\x121', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x5', '\x12', '\n', 
		'\x2', '\x124', '\x125', '\a', '\x2', '\x2', '\x3', '\x125', '\x126', 
		'\b', '\r', '\x1', '\x2', '\x126', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '!', ')', '\x30', ':', '\x44', 'I', 'U', 'W', '\x64', '\x66', 
		't', '\x7F', '\x8C', '\x8F', '\x121',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AngouriMath.Core.Antlr
