//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./AngouriMath.g by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AngouriMath.Core.Antlr {

    using System.Linq;
    using AngouriMath;
    using static AngouriMath.Core.Exceptions.FunctionArgumentCountException;
    using static AngouriMath.Entity.Number;
    using AngouriMath.Core.Exceptions;
    using static AngouriMath.Entity.Set;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AngouriMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		NEWLINE=60, NUMBER=61, BOOLEAN=62, VARIABLE=63, COMMENT=64, WS=65;
	public const int
		RULE_factorial_expression = 0, RULE_power_list = 1, RULE_power_expression = 2, 
		RULE_unary_expression = 3, RULE_mult_expression = 4, RULE_sum_expression = 5, 
		RULE_inequality_expression = 6, RULE_equality_expression = 7, RULE_negate_expression = 8, 
		RULE_and_expression = 9, RULE_xor_expression = 10, RULE_or_expression = 11, 
		RULE_implies_expression = 12, RULE_expression = 13, RULE_function_arguments = 14, 
		RULE_interval_arguments = 15, RULE_cset_arguments = 16, RULE_atom = 17, 
		RULE_statement = 18;
	public static readonly string[] ruleNames = {
		"factorial_expression", "power_list", "power_expression", "unary_expression", 
		"mult_expression", "sum_expression", "inequality_expression", "equality_expression", 
		"negate_expression", "and_expression", "xor_expression", "or_expression", 
		"implies_expression", "expression", "function_arguments", "interval_arguments", 
		"cset_arguments", "atom", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'^'", "'-'", "'+'", "'*'", "'/'", "'>='", "'<='", "'>'", 
		"'<'", "'equalizes'", "'='", "'not'", "'and'", "'&'", "'xor'", "'or'", 
		"'|'", "'implies'", "'->'", "','", "';'", "':'", "'(|'", "'|)'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'sin('", "'cos('", "'log('", "'sqrt('", 
		"'cbrt('", "'sqr('", "'ln('", "'tan('", "'cotan('", "'sec('", "'cosec('", 
		"'arcsin('", "'arccos('", "'arctan('", "'arccotan('", "'arcsec('", "'arccosec('", 
		"'gamma('", "'derivative('", "'integral('", "'limit('", "'limitleft('", 
		"'limitright('", "'signum('", "'sgn('", "'sign('", "'abs('", "'domain('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NEWLINE", "NUMBER", "BOOLEAN", "VARIABLE", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AngouriMath.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AngouriMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    // Nullable reference type analysis is disabled by default for generated code without '#nullable enable'
	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }

		public AngouriMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AngouriMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class Factorial_expressionContext : ParserRuleContext {
		public Entity value;
		public AtomContext p;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Factorial_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorial_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFactorial_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFactorial_expression(this);
		}
	}

	[RuleVersion(0)]
	public Factorial_expressionContext factorial_expression() {
		Factorial_expressionContext _localctx = new Factorial_expressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_factorial_expression);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; _localctx.p = atom();
				State = 39; Match(T__0);
				 _localctx.value =  MathS.Factorial(_localctx.p.value); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42; _localctx.p = atom();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_listContext : ParserRuleContext {
		public List<Entity> value;
		public Factorial_expressionContext _factorial_expression;
		public Factorial_expressionContext[] factorial_expression() {
			return GetRuleContexts<Factorial_expressionContext>();
		}
		public Factorial_expressionContext factorial_expression(int i) {
			return GetRuleContext<Factorial_expressionContext>(i);
		}
		public Power_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_list(this);
		}
	}

	[RuleVersion(0)]
	public Power_listContext power_list() {
		Power_listContext _localctx = new Power_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_power_list);
		 _localctx.value =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 47; Match(T__1);
				State = 48; _localctx._factorial_expression = factorial_expression();
				 _localctx.value.Add(_localctx._factorial_expression.value); 
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_expressionContext : ParserRuleContext {
		public Entity value;
		public Factorial_expressionContext _factorial_expression;
		public Power_listContext _power_list;
		public Factorial_expressionContext factorial_expression() {
			return GetRuleContext<Factorial_expressionContext>(0);
		}
		public Power_listContext power_list() {
			return GetRuleContext<Power_listContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_power_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; _localctx._factorial_expression = factorial_expression();
			 _localctx.value =  _localctx._factorial_expression.value; 
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 57; _localctx._power_list = power_list();

				        var list = _localctx._power_list.value;
				        _localctx.value =  list.Last();
				        list.RemoveAt(list.Count - 1);
				        list.Reverse(); 
				        list.Add(_localctx._factorial_expression.value);
				        foreach(var p in list) { _localctx.value =  MathS.Pow(p, _localctx.value); }
				    
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Unary_expressionContext : ParserRuleContext {
		public Entity value;
		public Power_expressionContext p;
		public Unary_expressionContext u;
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unary_expression);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 62; Match(T__2);
					State = 63; _localctx.p = power_expression();
					 _localctx.value =  -_localctx.p.value; 
					}
					break;
				case T__3:
					{
					State = 66; Match(T__3);
					State = 67; _localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 72; Match(T__2);
					State = 73; _localctx.u = unary_expression();
					 _localctx.value =  -_localctx.u.value; 
					}
					break;
				case T__3:
					{
					State = 76; Match(T__3);
					State = 77; _localctx.u = unary_expression();
					 _localctx.value =  _localctx.u.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82; _localctx.p = power_expression();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Mult_expressionContext : ParserRuleContext {
		public Entity value;
		public Unary_expressionContext u1;
		public Unary_expressionContext u2;
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; _localctx.u1 = unary_expression();
			 _localctx.value =  _localctx.u1.value; 
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__5) {
				{
				State = 97;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 89; Match(T__4);
					State = 90; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value * _localctx.u2.value; 
					}
					break;
				case T__5:
					{
					State = 93; Match(T__5);
					State = 94; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value / _localctx.u2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Sum_expressionContext : ParserRuleContext {
		public Entity value;
		public Mult_expressionContext m1;
		public Mult_expressionContext m2;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_sum_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; _localctx.m1 = mult_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				State = 112;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 104; Match(T__3);
					State = 105; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value + _localctx.m2.value; 
					}
					break;
				case T__2:
					{
					State = 108; Match(T__2);
					State = 109; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value - _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Inequality_expressionContext : ParserRuleContext {
		public Entity value;
		public Sum_expressionContext m1;
		public Sum_expressionContext m2;
		public Sum_expressionContext[] sum_expression() {
			return GetRuleContexts<Sum_expressionContext>();
		}
		public Sum_expressionContext sum_expression(int i) {
			return GetRuleContext<Sum_expressionContext>(i);
		}
		public Inequality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inequality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterInequality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitInequality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inequality_expressionContext inequality_expression() {
		Inequality_expressionContext _localctx = new Inequality_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_inequality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; _localctx.m1 = sum_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) {
				{
				State = 139;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__6:
					{
					State = 119; Match(T__6);
					State = 120; _localctx.m2 = sum_expression();
					 _localctx.value =  _localctx.value >= _localctx.m2.value; 
					}
					break;
				case T__7:
					{
					State = 123; Match(T__7);
					State = 124; _localctx.m2 = sum_expression();
					 _localctx.value =  _localctx.value <= _localctx.m2.value; 
					}
					break;
				case T__8:
					{
					State = 127; Match(T__8);
					State = 128; _localctx.m2 = sum_expression();
					 _localctx.value =  _localctx.value > _localctx.m2.value; 
					}
					break;
				case T__9:
					{
					State = 131; Match(T__9);
					State = 132; _localctx.m2 = sum_expression();
					 _localctx.value =  _localctx.value < _localctx.m2.value; 
					}
					break;
				case T__10:
					{
					State = 135; Match(T__10);
					State = 136; _localctx.m2 = sum_expression();
					 _localctx.value =  MathS.Equality(_localctx.value, _localctx.m2.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Equality_expressionContext : ParserRuleContext {
		public Entity value;
		public Inequality_expressionContext m1;
		public Inequality_expressionContext m2;
		public Inequality_expressionContext[] inequality_expression() {
			return GetRuleContexts<Inequality_expressionContext>();
		}
		public Inequality_expressionContext inequality_expression(int i) {
			return GetRuleContext<Inequality_expressionContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; _localctx.m1 = inequality_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 146; Match(T__11);
				State = 147; _localctx.m2 = inequality_expression();
				 _localctx.value =  _localctx.value.Equalizes(_localctx.m2.value); 
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Negate_expressionContext : ParserRuleContext {
		public Entity value;
		public Equality_expressionContext _equality_expression;
		public Negate_expressionContext _negate_expression;
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public Negate_expressionContext negate_expression() {
			return GetRuleContext<Negate_expressionContext>(0);
		}
		public Negate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterNegate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitNegate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Negate_expressionContext negate_expression() {
		Negate_expressionContext _localctx = new Negate_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_negate_expression);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; Match(T__12);
				State = 156; _localctx._equality_expression = equality_expression();
				 _localctx.value =  !_localctx._equality_expression.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(T__12);
				State = 160; _localctx._negate_expression = negate_expression();
				 _localctx.value =  !_localctx._negate_expression.value; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; _localctx._equality_expression = equality_expression();
				 _localctx.value =  _localctx._equality_expression.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class And_expressionContext : ParserRuleContext {
		public Entity value;
		public Negate_expressionContext m1;
		public Negate_expressionContext m2;
		public Negate_expressionContext[] negate_expression() {
			return GetRuleContexts<Negate_expressionContext>();
		}
		public Negate_expressionContext negate_expression(int i) {
			return GetRuleContext<Negate_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; _localctx.m1 = negate_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13 || _la==T__14) {
				{
				State = 178;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
					{
					State = 170; Match(T__13);
					State = 171; _localctx.m2 = negate_expression();
					 _localctx.value =  _localctx.value & _localctx.m2.value; 
					}
					break;
				case T__14:
					{
					State = 174; Match(T__14);
					State = 175; _localctx.m2 = negate_expression();
					 _localctx.value =  _localctx.value & _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Xor_expressionContext : ParserRuleContext {
		public Entity value;
		public And_expressionContext m1;
		public And_expressionContext m2;
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public Xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Xor_expressionContext xor_expression() {
		Xor_expressionContext _localctx = new Xor_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_xor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; _localctx.m1 = and_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 185; Match(T__15);
				State = 186; _localctx.m2 = and_expression();
				 _localctx.value =  _localctx.value ^ _localctx.m2.value; 
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Or_expressionContext : ParserRuleContext {
		public Entity value;
		public Xor_expressionContext m1;
		public Xor_expressionContext m2;
		public Xor_expressionContext[] xor_expression() {
			return GetRuleContexts<Xor_expressionContext>();
		}
		public Xor_expressionContext xor_expression(int i) {
			return GetRuleContext<Xor_expressionContext>(i);
		}
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		Or_expressionContext _localctx = new Or_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; _localctx.m1 = xor_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16 || _la==T__17) {
				{
				State = 204;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__16:
					{
					State = 196; Match(T__16);
					State = 197; _localctx.m2 = xor_expression();
					 _localctx.value =  _localctx.value | _localctx.m2.value; 
					}
					break;
				case T__17:
					{
					State = 200; Match(T__17);
					State = 201; _localctx.m2 = xor_expression();
					 _localctx.value =  _localctx.value | _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Implies_expressionContext : ParserRuleContext {
		public Entity value;
		public Or_expressionContext m1;
		public Or_expressionContext m2;
		public Or_expressionContext[] or_expression() {
			return GetRuleContexts<Or_expressionContext>();
		}
		public Or_expressionContext or_expression(int i) {
			return GetRuleContext<Or_expressionContext>(i);
		}
		public Implies_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implies_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterImplies_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitImplies_expression(this);
		}
	}

	[RuleVersion(0)]
	public Implies_expressionContext implies_expression() {
		Implies_expressionContext _localctx = new Implies_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_implies_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; _localctx.m1 = or_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18 || _la==T__19) {
				{
				State = 219;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__18:
					{
					State = 211; Match(T__18);
					State = 212; _localctx.m2 = or_expression();
					 _localctx.value =  _localctx.value.Implies(_localctx.m2.value); 
					}
					break;
				case T__19:
					{
					State = 215; Match(T__19);
					State = 216; _localctx.m2 = or_expression();
					 _localctx.value =  _localctx.value.Implies(_localctx.m2.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		public Entity value;
		public Implies_expressionContext s;
		public Implies_expressionContext implies_expression() {
			return GetRuleContext<Implies_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; _localctx.s = implies_expression();
			 _localctx.value =  _localctx.s.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Function_argumentsContext : ParserRuleContext {
		public List<Entity> list;
		public ExpressionContext e;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_arguments);
		 _localctx.list =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__12) | (1L << T__23) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << NUMBER) | (1L << BOOLEAN) | (1L << VARIABLE))) != 0)) {
				{
				State = 227; _localctx.e = expression();
				 _localctx.list.Add(_localctx.e.value); 
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__20) {
					{
					{
					State = 229; Match(T__20);
					State = 230; _localctx.e = expression();
					 _localctx.list.Add(_localctx.e.value); 
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Interval_argumentsContext : ParserRuleContext {
		public (Entity from, Entity to) couple;
		public ExpressionContext from;
		public ExpressionContext to;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Interval_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterInterval_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitInterval_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Interval_argumentsContext interval_arguments() {
		Interval_argumentsContext _localctx = new Interval_argumentsContext(Context, State);
		EnterRule(_localctx, 30, RULE_interval_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; _localctx.from = expression();
			 _localctx.couple.from = _localctx.from.value; 
			State = 242; Match(T__21);
			State = 243; _localctx.to = expression();
			 _localctx.couple.to = _localctx.to.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Cset_argumentsContext : ParserRuleContext {
		public (Entity variable, Entity predicate) couple;
		public ExpressionContext variable;
		public ExpressionContext predicate;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Cset_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cset_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterCset_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitCset_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Cset_argumentsContext cset_arguments() {
		Cset_argumentsContext _localctx = new Cset_argumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_cset_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; _localctx.variable = expression();
			 _localctx.couple.variable = _localctx.variable.value; 
			State = 248; Match(T__22);
			State = 249; _localctx.predicate = expression();
			 _localctx.couple.predicate = _localctx.predicate.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		public Entity value;
		public IToken _NUMBER;
		public IToken _BOOLEAN;
		public IToken _VARIABLE;
		public ExpressionContext _expression;
		public Interval_argumentsContext _interval_arguments;
		public Cset_argumentsContext cset_args;
		public Function_argumentsContext args;
		public ITerminalNode NUMBER() { return GetToken(AngouriMathParser.NUMBER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(AngouriMathParser.BOOLEAN, 0); }
		public ITerminalNode VARIABLE() { return GetToken(AngouriMathParser.VARIABLE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interval_argumentsContext interval_arguments() {
			return GetRuleContext<Interval_argumentsContext>(0);
		}
		public Cset_argumentsContext cset_arguments() {
			return GetRuleContext<Cset_argumentsContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 34, RULE_atom);
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252; _localctx._NUMBER = Match(NUMBER);
				 _localctx.value =  Entity.Number.Complex.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; _localctx._BOOLEAN = Match(BOOLEAN);
				 _localctx.value =  Entity.Boolean.Parse((_localctx._BOOLEAN!=null?_localctx._BOOLEAN.Text:null)); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256; _localctx._VARIABLE = Match(VARIABLE);
				 _localctx.value =  Entity.Variable.CreateVariableUnchecked((_localctx._VARIABLE!=null?_localctx._VARIABLE.Text:null)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; Match(T__23);
				State = 259; _localctx._expression = expression();
				State = 260; Match(T__24);
				 _localctx.value =  _localctx._expression.value.Abs(); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 263; Match(T__25);
				State = 264; _localctx._interval_arguments = interval_arguments();
				State = 265; Match(T__26);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, false, _localctx._interval_arguments.couple.to, false); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 268; Match(T__27);
				State = 269; _localctx._interval_arguments = interval_arguments();
				State = 270; Match(T__26);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, false); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 273; Match(T__27);
				State = 274; _localctx._interval_arguments = interval_arguments();
				State = 275; Match(T__28);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, true); 
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 278; Match(T__27);
				State = 279; _localctx._interval_arguments = interval_arguments();
				State = 280; Match(T__28);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, true); 
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 283; Match(T__25);
				State = 284; _localctx._expression = expression();
				State = 285; Match(T__26);
				 _localctx.value =  _localctx._expression.value; 
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 288; Match(T__29);
				State = 289; _localctx.cset_args = cset_arguments();
				State = 290; Match(T__30);
				 _localctx.value =  new ConditionalSet(_localctx.cset_args.couple.variable, _localctx.cset_args.couple.predicate); 
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 293; Match(T__29);
				State = 294; _localctx.args = function_arguments();
				State = 295; Match(T__30);
				 _localctx.value =  new FiniteSet((IEnumerable<Entity>)_localctx.args.list); 
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 298; Match(T__31);
				State = 299; _localctx.args = function_arguments();
				State = 300; Match(T__26);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sin(_localctx.args.list[0]); 
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 303; Match(T__32);
				State = 304; _localctx.args = function_arguments();
				State = 305; Match(T__26);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cos(_localctx.args.list[0]); 
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 308; Match(T__33);
				State = 309; _localctx.args = function_arguments();
				State = 310; Match(T__26);
				 _localctx.value =  Assert("log", (1, 2), _localctx.args.list.Count) ? MathS.Log(10, _localctx.args.list[0]) : MathS.Log(_localctx.args.list[0], _localctx.args.list[1]); 
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 313; Match(T__34);
				State = 314; _localctx.args = function_arguments();
				State = 315; Match(T__26);
				 Assert("sqrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqrt(_localctx.args.list[0]); 
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 318; Match(T__35);
				State = 319; _localctx.args = function_arguments();
				State = 320; Match(T__26);
				 Assert("cbrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cbrt(_localctx.args.list[0]); 
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 323; Match(T__36);
				State = 324; _localctx.args = function_arguments();
				State = 325; Match(T__26);
				 Assert("sqr", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqr(_localctx.args.list[0]); 
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 328; Match(T__37);
				State = 329; _localctx.args = function_arguments();
				State = 330; Match(T__26);
				 Assert("ln", 1, _localctx.args.list.Count); _localctx.value =  MathS.Ln(_localctx.args.list[0]); 
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 333; Match(T__38);
				State = 334; _localctx.args = function_arguments();
				State = 335; Match(T__26);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Tan(_localctx.args.list[0]); 
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 338; Match(T__39);
				State = 339; _localctx.args = function_arguments();
				State = 340; Match(T__26);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 343; Match(T__40);
				State = 344; _localctx.args = function_arguments();
				State = 345; Match(T__26);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sec(_localctx.args.list[0]); 
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 348; Match(T__41);
				State = 349; _localctx.args = function_arguments();
				State = 350; Match(T__26);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 353; Match(T__42);
				State = 354; _localctx.args = function_arguments();
				State = 355; Match(T__26);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 358; Match(T__43);
				State = 359; _localctx.args = function_arguments();
				State = 360; Match(T__26);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 363; Match(T__44);
				State = 364; _localctx.args = function_arguments();
				State = 365; Match(T__26);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 368; Match(T__45);
				State = 369; _localctx.args = function_arguments();
				State = 370; Match(T__26);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 373; Match(T__46);
				State = 374; _localctx.args = function_arguments();
				State = 375; Match(T__26);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 378; Match(T__47);
				State = 379; _localctx.args = function_arguments();
				State = 380; Match(T__26);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 383; Match(T__48);
				State = 384; _localctx.args = function_arguments();
				State = 385; Match(T__26);
				 Assert("gamma", 1, _localctx.args.list.Count); _localctx.value =  MathS.Gamma(_localctx.args.list[0]); 
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 388; Match(T__49);
				State = 389; _localctx.args = function_arguments();
				State = 390; Match(T__26);
				 
				            Assert("derivative", 3, _localctx.args.list.Count); 
				            if (_localctx.args.list[2] is Integer { EInteger: var asEInt })
				                _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1], asEInt.ToInt32Checked());
				            else
				                throw new ParseException("Expected number for the third argument of derivative");
				        
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 393; Match(T__50);
				State = 394; _localctx.args = function_arguments();
				State = 395; Match(T__26);
				 
				            Assert("integral", 3, _localctx.args.list.Count); 
				            if (_localctx.args.list[2] is Integer { EInteger: var asEInt })
				                _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1], asEInt.ToInt32Checked());
				            else
				                throw new ParseException("Expected number for the third argument of integral");
				        
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 398; Match(T__51);
				State = 399; _localctx.args = function_arguments();
				State = 400; Match(T__26);
				 Assert("limit", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 403; Match(T__52);
				State = 404; _localctx.args = function_arguments();
				State = 405; Match(T__26);
				 Assert("limitleft", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Left); 
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 408; Match(T__53);
				State = 409; _localctx.args = function_arguments();
				State = 410; Match(T__26);
				 Assert("limitright", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Right); 
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 413; Match(T__54);
				State = 414; _localctx.args = function_arguments();
				State = 415; Match(T__26);
				 Assert("signum", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 418; Match(T__55);
				State = 419; _localctx.args = function_arguments();
				State = 420; Match(T__26);
				 Assert("sgn", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 423; Match(T__56);
				State = 424; _localctx.args = function_arguments();
				State = 425; Match(T__26);
				 Assert("sign", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 428; Match(T__57);
				State = 429; _localctx.args = function_arguments();
				State = 430; Match(T__26);
				 Assert("abs", 1, _localctx.args.list.Count); _localctx.value =  MathS.Abs(_localctx.args.list[0]); 
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 433; Match(T__58);
				State = 434; _localctx.args = function_arguments();
				State = 435; Match(T__26);
				 Assert("domain", 2, _localctx.args.list.Count); _localctx.value =  _localctx.args.list[0].WithCodomain(DomainsFunctional.Parse(_localctx.args.list[1])); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AngouriMathParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; _localctx._expression = expression();
			State = 441; Match(Eof);
			 Result = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x43', '\x1BF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x30', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', '\x36', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x37', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '?', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'I', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'S', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x64', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 'g', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 's', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'v', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x8E', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x91', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x99', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x9C', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xA9', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xB5', '\n', '\v', '\f', '\v', '\xE', '\v', '\xB8', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\xC0', '\n', '\f', '\f', '\f', '\xE', '\f', '\xC3', '\v', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\xCF', '\n', '\r', '\f', '\r', '\xE', '\r', '\xD2', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xDE', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xE1', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\xEC', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xEF', '\v', 
		'\x10', '\x5', '\x10', '\xF1', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x1B9', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x2', '\x2', '\x15', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\x2', 
		'\x2', '\x1ED', '\x2', '/', '\x3', '\x2', '\x2', '\x2', '\x4', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'W', '\x3', '\x2', '\x2', '\x2', '\n', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x92', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xF2', '\x3', '\x2', '\x2', '\x2', '\"', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x1B8', '\x3', '\x2', '\x2', '\x2', '&', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\x5', '$', '\x13', '\x2', ')', '*', '\a', 
		'\x3', '\x2', '\x2', '*', '+', '\b', '\x2', '\x1', '\x2', '+', '\x30', 
		'\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '$', '\x13', '\x2', '-', 
		'.', '\b', '\x2', '\x1', '\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'/', '(', '\x3', '\x2', '\x2', '\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x3', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x4', 
		'\x2', '\x2', '\x32', '\x33', '\x5', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\b', '\x3', '\x1', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x31', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x5', '\x2', '\x2', '\x2', ':', '>', '\b', '\x4', '\x1', 
		'\x2', ';', '<', '\x5', '\x4', '\x3', '\x2', '<', '=', '\b', '\x4', '\x1', 
		'\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', ';', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\a', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '\x5', '\x2', '\x2', '\x41', '\x42', 
		'\x5', '\x6', '\x4', '\x2', '\x42', '\x43', '\b', '\x5', '\x1', '\x2', 
		'\x43', 'I', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x6', 
		'\x2', '\x2', '\x45', '\x46', '\x5', '\x6', '\x4', '\x2', '\x46', 'G', 
		'\b', '\x5', '\x1', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', 
		'@', '\x3', '\x2', '\x2', '\x2', 'H', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'I', 'X', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x5', '\x2', '\x2', 
		'K', 'L', '\x5', '\b', '\x5', '\x2', 'L', 'M', '\b', '\x5', '\x1', '\x2', 
		'M', 'S', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x6', '\x2', '\x2', 
		'O', 'P', '\x5', '\b', '\x5', '\x2', 'P', 'Q', '\b', '\x5', '\x1', '\x2', 
		'Q', 'S', '\x3', '\x2', '\x2', '\x2', 'R', 'J', '\x3', '\x2', '\x2', '\x2', 
		'R', 'N', '\x3', '\x2', '\x2', '\x2', 'S', 'X', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x5', '\x6', '\x4', '\x2', 'U', 'V', '\b', '\x5', '\x1', '\x2', 
		'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'H', '\x3', '\x2', '\x2', '\x2', 
		'W', 'R', '\x3', '\x2', '\x2', '\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 
		'X', '\t', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x5', '\b', '\x5', '\x2', 
		'Z', '\x65', '\b', '\x6', '\x1', '\x2', '[', '\\', '\a', '\a', '\x2', 
		'\x2', '\\', ']', '\x5', '\b', '\x5', '\x2', ']', '^', '\b', '\x6', '\x1', 
		'\x2', '^', '\x64', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\b', 
		'\x2', '\x2', '`', '\x61', '\x5', '\b', '\x5', '\x2', '\x61', '\x62', 
		'\b', '\x6', '\x1', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '[', '\x3', '\x2', '\x2', '\x2', '\x63', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\x5', '\n', '\x6', '\x2', 'i', 't', '\b', '\a', '\x1', '\x2', 
		'j', 'k', '\a', '\x6', '\x2', '\x2', 'k', 'l', '\x5', '\n', '\x6', '\x2', 
		'l', 'm', '\b', '\a', '\x1', '\x2', 'm', 's', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '\x5', '\x2', '\x2', 'o', 'p', '\x5', '\n', '\x6', '\x2', 
		'p', 'q', '\b', '\a', '\x1', '\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 
		'r', 'j', '\x3', '\x2', '\x2', '\x2', 'r', 'n', '\x3', '\x2', '\x2', '\x2', 
		's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x5', '\f', '\a', 
		'\x2', 'x', '\x8F', '\b', '\b', '\x1', '\x2', 'y', 'z', '\a', '\t', '\x2', 
		'\x2', 'z', '{', '\x5', '\f', '\a', '\x2', '{', '|', '\b', '\b', '\x1', 
		'\x2', '|', '\x8E', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\n', 
		'\x2', '\x2', '~', '\x7F', '\x5', '\f', '\a', '\x2', '\x7F', '\x80', '\b', 
		'\b', '\x1', '\x2', '\x80', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\v', '\x2', '\x2', '\x82', '\x83', '\x5', '\f', '\a', '\x2', 
		'\x83', '\x84', '\b', '\b', '\x1', '\x2', '\x84', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '\f', '\x2', '\x2', '\x86', '\x87', 
		'\x5', '\f', '\a', '\x2', '\x87', '\x88', '\b', '\b', '\x1', '\x2', '\x88', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\r', '\x2', 
		'\x2', '\x8A', '\x8B', '\x5', '\f', '\a', '\x2', '\x8B', '\x8C', '\b', 
		'\b', '\x1', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x8D', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x5', '\xE', '\b', '\x2', '\x93', '\x9A', '\b', '\t', '\x1', '\x2', '\x94', 
		'\x95', '\a', '\xE', '\x2', '\x2', '\x95', '\x96', '\x5', '\xE', '\b', 
		'\x2', '\x96', '\x97', '\b', '\t', '\x1', '\x2', '\x97', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x94', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\a', '\xF', '\x2', '\x2', '\x9E', '\x9F', '\x5', '\x10', '\t', 
		'\x2', '\x9F', '\xA0', '\b', '\n', '\x1', '\x2', '\xA0', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\xF', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x12', '\n', '\x2', '\xA3', '\xA4', '\b', '\n', '\x1', 
		'\x2', '\xA4', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', 
		'\x10', '\t', '\x2', '\xA6', '\xA7', '\b', '\n', '\x1', '\x2', '\xA7', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\x13', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x5', '\x12', '\n', '\x2', '\xAB', '\xB6', '\b', '\v', '\x1', 
		'\x2', '\xAC', '\xAD', '\a', '\x10', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		'\x12', '\n', '\x2', '\xAE', '\xAF', '\b', '\v', '\x1', '\x2', '\xAF', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x11', '\x2', 
		'\x2', '\xB1', '\xB2', '\x5', '\x12', '\n', '\x2', '\xB2', '\xB3', '\b', 
		'\v', '\x1', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\x5', '\x14', '\v', '\x2', '\xBA', '\xC1', '\b', 
		'\f', '\x1', '\x2', '\xBB', '\xBC', '\a', '\x12', '\x2', '\x2', '\xBC', 
		'\xBD', '\x5', '\x14', '\v', '\x2', '\xBD', '\xBE', '\b', '\f', '\x1', 
		'\x2', '\xBE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x16', '\f', '\x2', '\xC5', 
		'\xD0', '\b', '\r', '\x1', '\x2', '\xC6', '\xC7', '\a', '\x13', '\x2', 
		'\x2', '\xC7', '\xC8', '\x5', '\x16', '\f', '\x2', '\xC8', '\xC9', '\b', 
		'\r', '\x1', '\x2', '\xC9', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '\x14', '\x2', '\x2', '\xCB', '\xCC', '\x5', '\x16', '\f', 
		'\x2', '\xCC', '\xCD', '\b', '\r', '\x1', '\x2', '\xCD', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x5', '\x18', '\r', 
		'\x2', '\xD4', '\xDF', '\b', '\xE', '\x1', '\x2', '\xD5', '\xD6', '\a', 
		'\x15', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\x18', '\r', '\x2', '\xD7', 
		'\xD8', '\b', '\xE', '\x1', '\x2', '\xD8', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x16', '\x2', '\x2', '\xDA', '\xDB', '\x5', 
		'\x18', '\r', '\x2', '\xDB', '\xDC', '\b', '\xE', '\x1', '\x2', '\xDC', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x5', 
		'\x1A', '\xE', '\x2', '\xE3', '\xE4', '\b', '\xF', '\x1', '\x2', '\xE4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x1C', '\xF', 
		'\x2', '\xE6', '\xED', '\b', '\x10', '\x1', '\x2', '\xE7', '\xE8', '\a', 
		'\x17', '\x2', '\x2', '\xE8', '\xE9', '\x5', '\x1C', '\xF', '\x2', '\xE9', 
		'\xEA', '\b', '\x10', '\x1', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x1C', '\xF', 
		'\x2', '\xF3', '\xF4', '\b', '\x11', '\x1', '\x2', '\xF4', '\xF5', '\a', 
		'\x18', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x1C', '\xF', '\x2', '\xF6', 
		'\xF7', '\b', '\x11', '\x1', '\x2', '\xF7', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\x5', '\x1C', '\xF', '\x2', '\xF9', '\xFA', '\b', 
		'\x12', '\x1', '\x2', '\xFA', '\xFB', '\a', '\x19', '\x2', '\x2', '\xFB', 
		'\xFC', '\x5', '\x1C', '\xF', '\x2', '\xFC', '\xFD', '\b', '\x12', '\x1', 
		'\x2', '\xFD', '#', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'?', '\x2', '\x2', '\xFF', '\x1B9', '\b', '\x13', '\x1', '\x2', '\x100', 
		'\x101', '\a', '@', '\x2', '\x2', '\x101', '\x1B9', '\b', '\x13', '\x1', 
		'\x2', '\x102', '\x103', '\a', '\x41', '\x2', '\x2', '\x103', '\x1B9', 
		'\b', '\x13', '\x1', '\x2', '\x104', '\x105', '\a', '\x1A', '\x2', '\x2', 
		'\x105', '\x106', '\x5', '\x1C', '\xF', '\x2', '\x106', '\x107', '\a', 
		'\x1B', '\x2', '\x2', '\x107', '\x108', '\b', '\x13', '\x1', '\x2', '\x108', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x1C', '\x2', 
		'\x2', '\x10A', '\x10B', '\x5', ' ', '\x11', '\x2', '\x10B', '\x10C', 
		'\a', '\x1D', '\x2', '\x2', '\x10C', '\x10D', '\b', '\x13', '\x1', '\x2', 
		'\x10D', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', 
		'\x1E', '\x2', '\x2', '\x10F', '\x110', '\x5', ' ', '\x11', '\x2', '\x110', 
		'\x111', '\a', '\x1D', '\x2', '\x2', '\x111', '\x112', '\b', '\x13', '\x1', 
		'\x2', '\x112', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\x1E', '\x2', '\x2', '\x114', '\x115', '\x5', ' ', '\x11', '\x2', 
		'\x115', '\x116', '\a', '\x1F', '\x2', '\x2', '\x116', '\x117', '\b', 
		'\x13', '\x1', '\x2', '\x117', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\a', '\x1E', '\x2', '\x2', '\x119', '\x11A', '\x5', ' ', '\x11', 
		'\x2', '\x11A', '\x11B', '\a', '\x1F', '\x2', '\x2', '\x11B', '\x11C', 
		'\b', '\x13', '\x1', '\x2', '\x11C', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\a', '\x1C', '\x2', '\x2', '\x11E', '\x11F', '\x5', 
		'\x1C', '\xF', '\x2', '\x11F', '\x120', '\a', '\x1D', '\x2', '\x2', '\x120', 
		'\x121', '\b', '\x13', '\x1', '\x2', '\x121', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x123', '\a', ' ', '\x2', '\x2', '\x123', '\x124', '\x5', 
		'\"', '\x12', '\x2', '\x124', '\x125', '\a', '!', '\x2', '\x2', '\x125', 
		'\x126', '\b', '\x13', '\x1', '\x2', '\x126', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x128', '\a', ' ', '\x2', '\x2', '\x128', '\x129', '\x5', 
		'\x1E', '\x10', '\x2', '\x129', '\x12A', '\a', '!', '\x2', '\x2', '\x12A', 
		'\x12B', '\b', '\x13', '\x1', '\x2', '\x12B', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12D', '\a', '\"', '\x2', '\x2', '\x12D', '\x12E', '\x5', 
		'\x1E', '\x10', '\x2', '\x12E', '\x12F', '\a', '\x1D', '\x2', '\x2', '\x12F', 
		'\x130', '\b', '\x13', '\x1', '\x2', '\x130', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x132', '\a', '#', '\x2', '\x2', '\x132', '\x133', '\x5', 
		'\x1E', '\x10', '\x2', '\x133', '\x134', '\a', '\x1D', '\x2', '\x2', '\x134', 
		'\x135', '\b', '\x13', '\x1', '\x2', '\x135', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x137', '\a', '$', '\x2', '\x2', '\x137', '\x138', '\x5', 
		'\x1E', '\x10', '\x2', '\x138', '\x139', '\a', '\x1D', '\x2', '\x2', '\x139', 
		'\x13A', '\b', '\x13', '\x1', '\x2', '\x13A', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\a', '%', '\x2', '\x2', '\x13C', '\x13D', '\x5', 
		'\x1E', '\x10', '\x2', '\x13D', '\x13E', '\a', '\x1D', '\x2', '\x2', '\x13E', 
		'\x13F', '\b', '\x13', '\x1', '\x2', '\x13F', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\a', '&', '\x2', '\x2', '\x141', '\x142', '\x5', 
		'\x1E', '\x10', '\x2', '\x142', '\x143', '\a', '\x1D', '\x2', '\x2', '\x143', 
		'\x144', '\b', '\x13', '\x1', '\x2', '\x144', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\a', '\'', '\x2', '\x2', '\x146', '\x147', '\x5', 
		'\x1E', '\x10', '\x2', '\x147', '\x148', '\a', '\x1D', '\x2', '\x2', '\x148', 
		'\x149', '\b', '\x13', '\x1', '\x2', '\x149', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\a', '(', '\x2', '\x2', '\x14B', '\x14C', '\x5', 
		'\x1E', '\x10', '\x2', '\x14C', '\x14D', '\a', '\x1D', '\x2', '\x2', '\x14D', 
		'\x14E', '\b', '\x13', '\x1', '\x2', '\x14E', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\a', ')', '\x2', '\x2', '\x150', '\x151', '\x5', 
		'\x1E', '\x10', '\x2', '\x151', '\x152', '\a', '\x1D', '\x2', '\x2', '\x152', 
		'\x153', '\b', '\x13', '\x1', '\x2', '\x153', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x155', '\a', '*', '\x2', '\x2', '\x155', '\x156', '\x5', 
		'\x1E', '\x10', '\x2', '\x156', '\x157', '\a', '\x1D', '\x2', '\x2', '\x157', 
		'\x158', '\b', '\x13', '\x1', '\x2', '\x158', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15A', '\a', '+', '\x2', '\x2', '\x15A', '\x15B', '\x5', 
		'\x1E', '\x10', '\x2', '\x15B', '\x15C', '\a', '\x1D', '\x2', '\x2', '\x15C', 
		'\x15D', '\b', '\x13', '\x1', '\x2', '\x15D', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\a', ',', '\x2', '\x2', '\x15F', '\x160', '\x5', 
		'\x1E', '\x10', '\x2', '\x160', '\x161', '\a', '\x1D', '\x2', '\x2', '\x161', 
		'\x162', '\b', '\x13', '\x1', '\x2', '\x162', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\a', '-', '\x2', '\x2', '\x164', '\x165', '\x5', 
		'\x1E', '\x10', '\x2', '\x165', '\x166', '\a', '\x1D', '\x2', '\x2', '\x166', 
		'\x167', '\b', '\x13', '\x1', '\x2', '\x167', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x169', '\a', '.', '\x2', '\x2', '\x169', '\x16A', '\x5', 
		'\x1E', '\x10', '\x2', '\x16A', '\x16B', '\a', '\x1D', '\x2', '\x2', '\x16B', 
		'\x16C', '\b', '\x13', '\x1', '\x2', '\x16C', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16E', '\a', '/', '\x2', '\x2', '\x16E', '\x16F', '\x5', 
		'\x1E', '\x10', '\x2', '\x16F', '\x170', '\a', '\x1D', '\x2', '\x2', '\x170', 
		'\x171', '\b', '\x13', '\x1', '\x2', '\x171', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x173', '\a', '\x30', '\x2', '\x2', '\x173', '\x174', 
		'\x5', '\x1E', '\x10', '\x2', '\x174', '\x175', '\a', '\x1D', '\x2', '\x2', 
		'\x175', '\x176', '\b', '\x13', '\x1', '\x2', '\x176', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x178', '\a', '\x31', '\x2', '\x2', '\x178', 
		'\x179', '\x5', '\x1E', '\x10', '\x2', '\x179', '\x17A', '\a', '\x1D', 
		'\x2', '\x2', '\x17A', '\x17B', '\b', '\x13', '\x1', '\x2', '\x17B', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', '\x32', '\x2', '\x2', 
		'\x17D', '\x17E', '\x5', '\x1E', '\x10', '\x2', '\x17E', '\x17F', '\a', 
		'\x1D', '\x2', '\x2', '\x17F', '\x180', '\b', '\x13', '\x1', '\x2', '\x180', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\a', '\x33', '\x2', 
		'\x2', '\x182', '\x183', '\x5', '\x1E', '\x10', '\x2', '\x183', '\x184', 
		'\a', '\x1D', '\x2', '\x2', '\x184', '\x185', '\b', '\x13', '\x1', '\x2', 
		'\x185', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\a', 
		'\x34', '\x2', '\x2', '\x187', '\x188', '\x5', '\x1E', '\x10', '\x2', 
		'\x188', '\x189', '\a', '\x1D', '\x2', '\x2', '\x189', '\x18A', '\b', 
		'\x13', '\x1', '\x2', '\x18A', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x18C', '\a', '\x35', '\x2', '\x2', '\x18C', '\x18D', '\x5', '\x1E', 
		'\x10', '\x2', '\x18D', '\x18E', '\a', '\x1D', '\x2', '\x2', '\x18E', 
		'\x18F', '\b', '\x13', '\x1', '\x2', '\x18F', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\a', '\x36', '\x2', '\x2', '\x191', '\x192', 
		'\x5', '\x1E', '\x10', '\x2', '\x192', '\x193', '\a', '\x1D', '\x2', '\x2', 
		'\x193', '\x194', '\b', '\x13', '\x1', '\x2', '\x194', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x196', '\a', '\x37', '\x2', '\x2', '\x196', 
		'\x197', '\x5', '\x1E', '\x10', '\x2', '\x197', '\x198', '\a', '\x1D', 
		'\x2', '\x2', '\x198', '\x199', '\b', '\x13', '\x1', '\x2', '\x199', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x38', '\x2', '\x2', 
		'\x19B', '\x19C', '\x5', '\x1E', '\x10', '\x2', '\x19C', '\x19D', '\a', 
		'\x1D', '\x2', '\x2', '\x19D', '\x19E', '\b', '\x13', '\x1', '\x2', '\x19E', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\x39', '\x2', 
		'\x2', '\x1A0', '\x1A1', '\x5', '\x1E', '\x10', '\x2', '\x1A1', '\x1A2', 
		'\a', '\x1D', '\x2', '\x2', '\x1A2', '\x1A3', '\b', '\x13', '\x1', '\x2', 
		'\x1A3', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', 
		':', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '\x1E', '\x10', '\x2', '\x1A6', 
		'\x1A7', '\a', '\x1D', '\x2', '\x2', '\x1A7', '\x1A8', '\b', '\x13', '\x1', 
		'\x2', '\x1A8', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\a', ';', '\x2', '\x2', '\x1AA', '\x1AB', '\x5', '\x1E', '\x10', '\x2', 
		'\x1AB', '\x1AC', '\a', '\x1D', '\x2', '\x2', '\x1AC', '\x1AD', '\b', 
		'\x13', '\x1', '\x2', '\x1AD', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\a', '<', '\x2', '\x2', '\x1AF', '\x1B0', '\x5', '\x1E', '\x10', 
		'\x2', '\x1B0', '\x1B1', '\a', '\x1D', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\b', '\x13', '\x1', '\x2', '\x1B2', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\a', '=', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', '\x1E', 
		'\x10', '\x2', '\x1B5', '\x1B6', '\a', '\x1D', '\x2', '\x2', '\x1B6', 
		'\x1B7', '\b', '\x13', '\x1', '\x2', '\x1B7', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x104', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x136', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x145', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x154', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x186', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x195', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B9', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x5', '\x1C', '\xF', '\x2', '\x1BB', '\x1BC', 
		'\a', '\x2', '\x2', '\x3', '\x1BC', '\x1BD', '\b', '\x14', '\x1', '\x2', 
		'\x1BD', '\'', '\x3', '\x2', '\x2', '\x2', '\x1A', '/', '\x37', '>', 'H', 
		'R', 'W', '\x63', '\x65', 'r', 't', '\x8D', '\x8F', '\x9A', '\xA8', '\xB4', 
		'\xB6', '\xC1', '\xCE', '\xD0', '\xDD', '\xDF', '\xED', '\xF0', '\x1B8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AngouriMath.Core.Antlr
