//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./AngouriMath.g by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AngouriMath.Core.Antlr {

    using System.Linq;
    using AngouriMath;
    using static AngouriMath.Core.Exceptions.FunctionArgumentCountException;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AngouriMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, NEWLINE=33, NUMBER=34, VARIABLE=35, COMMENT=36, WS=37;
	public const int
		RULE_factorial_expression = 0, RULE_power_list = 1, RULE_power_expression = 2, 
		RULE_unary_expression = 3, RULE_mult_expression = 4, RULE_sum_expression = 5, 
		RULE_expression = 6, RULE_function_arguments = 7, RULE_atom = 8, RULE_statement = 9;
	public static readonly string[] ruleNames = {
		"factorial_expression", "power_list", "power_expression", "unary_expression", 
		"mult_expression", "sum_expression", "expression", "function_arguments", 
		"atom", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'^'", "'-'", "'+'", "'*'", "'/'", "','", "'('", "')'", "'sin('", 
		"'cos('", "'log('", "'sqrt('", "'cbrt('", "'sqr('", "'ln('", "'tan('", 
		"'cotan('", "'sec('", "'cosec('", "'arcsin('", "'arccos('", "'arctan('", 
		"'arccotan('", "'arcsec('", "'arccosec('", "'gamma('", "'derivative('", 
		"'integral('", "'limit('", "'limitleft('", "'limitright('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "NEWLINE", "NUMBER", 
		"VARIABLE", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AngouriMath.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AngouriMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    // Nullable reference type analysis is disabled by default for generated code without '#nullable enable'
	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }

		public AngouriMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AngouriMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class Factorial_expressionContext : ParserRuleContext {
		public Entity value;
		public AtomContext p;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Factorial_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorial_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFactorial_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFactorial_expression(this);
		}
	}

	[RuleVersion(0)]
	public Factorial_expressionContext factorial_expression() {
		Factorial_expressionContext _localctx = new Factorial_expressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_factorial_expression);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; _localctx.p = atom();
				State = 21; Match(T__0);
				 _localctx.value =  MathS.Factorial(_localctx.p.value); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; _localctx.p = atom();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_listContext : ParserRuleContext {
		public List<Entity> value;
		public Factorial_expressionContext _factorial_expression;
		public Factorial_expressionContext[] factorial_expression() {
			return GetRuleContexts<Factorial_expressionContext>();
		}
		public Factorial_expressionContext factorial_expression(int i) {
			return GetRuleContext<Factorial_expressionContext>(i);
		}
		public Power_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_list(this);
		}
	}

	[RuleVersion(0)]
	public Power_listContext power_list() {
		Power_listContext _localctx = new Power_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_power_list);
		 _localctx.value =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 29; Match(T__1);
				State = 30; _localctx._factorial_expression = factorial_expression();
				 _localctx.value.Add(_localctx._factorial_expression.value); 
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_expressionContext : ParserRuleContext {
		public Entity value;
		public Factorial_expressionContext _factorial_expression;
		public Power_listContext _power_list;
		public Factorial_expressionContext factorial_expression() {
			return GetRuleContext<Factorial_expressionContext>(0);
		}
		public Power_listContext power_list() {
			return GetRuleContext<Power_listContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_power_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; _localctx._factorial_expression = factorial_expression();
			 _localctx.value =  _localctx._factorial_expression.value; 
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 39; _localctx._power_list = power_list();

				        var list = _localctx._power_list.value;
				        _localctx.value =  list.Last();
				        list.RemoveAt(list.Count - 1);
				        list.Reverse(); 
				        list.Add(_localctx._factorial_expression.value);
				        foreach(var p in list) { _localctx.value =  MathS.Pow(p, _localctx.value); }
				    
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Unary_expressionContext : ParserRuleContext {
		public Entity value;
		public Power_expressionContext p;
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unary_expression);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 44; Match(T__2);
					State = 45; _localctx.p = power_expression();
					 _localctx.value =  -_localctx.p.value; 
					}
					break;
				case T__3:
					{
					State = 48; Match(T__3);
					State = 49; _localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__7:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case NUMBER:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; _localctx.p = power_expression();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Mult_expressionContext : ParserRuleContext {
		public Entity value;
		public Unary_expressionContext u1;
		public Unary_expressionContext u2;
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; _localctx.u1 = unary_expression();
			 _localctx.value =  _localctx.u1.value; 
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__5) {
				{
				State = 69;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 61; Match(T__4);
					State = 62; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value * _localctx.u2.value; 
					}
					break;
				case T__5:
					{
					State = 65; Match(T__5);
					State = 66; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value / _localctx.u2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Sum_expressionContext : ParserRuleContext {
		public Entity value;
		public Mult_expressionContext m1;
		public Mult_expressionContext m2;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_sum_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; _localctx.m1 = mult_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 76; Match(T__3);
					State = 77; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value + _localctx.m2.value; 
					}
					break;
				case T__2:
					{
					State = 80; Match(T__2);
					State = 81; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value - _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		public Entity value;
		public Sum_expressionContext s;
		public Sum_expressionContext sum_expression() {
			return GetRuleContext<Sum_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; _localctx.s = sum_expression();
			 _localctx.value =  _localctx.s.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Function_argumentsContext : ParserRuleContext {
		public List<Entity> list;
		public ExpressionContext e;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_arguments);
		 _localctx.list =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << NUMBER) | (1L << VARIABLE))) != 0)) {
				{
				State = 92; _localctx.e = expression();
				 _localctx.list.Add(_localctx.e.value); 
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 94; Match(T__6);
					State = 95; _localctx.e = expression();
					 _localctx.list.Add(_localctx.e.value); 
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		public Entity value;
		public IToken _NUMBER;
		public IToken _VARIABLE;
		public ExpressionContext _expression;
		public Function_argumentsContext args;
		public ITerminalNode NUMBER() { return GetToken(AngouriMathParser.NUMBER, 0); }
		public ITerminalNode VARIABLE() { return GetToken(AngouriMathParser.VARIABLE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; _localctx._NUMBER = Match(NUMBER);
				 _localctx.value =  Entity.Number.Complex.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)); 
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; _localctx._VARIABLE = Match(VARIABLE);
				 _localctx.value =  Entity.Variable.CreateVariableUnchecked((_localctx._VARIABLE!=null?_localctx._VARIABLE.Text:null)); 
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; Match(T__7);
				State = 110; _localctx._expression = expression();
				State = 111; Match(T__8);
				 _localctx.value =  _localctx._expression.value; 
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114; Match(T__9);
				State = 115; _localctx.args = function_arguments();
				State = 116; Match(T__8);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sin(_localctx.args.list[0]); 
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 119; Match(T__10);
				State = 120; _localctx.args = function_arguments();
				State = 121; Match(T__8);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cos(_localctx.args.list[0]); 
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 124; Match(T__11);
				State = 125; _localctx.args = function_arguments();
				State = 126; Match(T__8);
				 _localctx.value =  Assert("log", (1, 2), _localctx.args.list.Count) ? MathS.Log(10, _localctx.args.list[0]) : MathS.Log(_localctx.args.list[0], _localctx.args.list[1]); 
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 7);
				{
				State = 129; Match(T__12);
				State = 130; _localctx.args = function_arguments();
				State = 131; Match(T__8);
				 Assert("sqrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqrt(_localctx.args.list[0]); 
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 8);
				{
				State = 134; Match(T__13);
				State = 135; _localctx.args = function_arguments();
				State = 136; Match(T__8);
				 Assert("cbrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cbrt(_localctx.args.list[0]); 
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 9);
				{
				State = 139; Match(T__14);
				State = 140; _localctx.args = function_arguments();
				State = 141; Match(T__8);
				 Assert("sqr", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqr(_localctx.args.list[0]); 
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 10);
				{
				State = 144; Match(T__15);
				State = 145; _localctx.args = function_arguments();
				State = 146; Match(T__8);
				 Assert("ln", 1, _localctx.args.list.Count); _localctx.value =  MathS.Ln(_localctx.args.list[0]); 
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 11);
				{
				State = 149; Match(T__16);
				State = 150; _localctx.args = function_arguments();
				State = 151; Match(T__8);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Tan(_localctx.args.list[0]); 
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 12);
				{
				State = 154; Match(T__17);
				State = 155; _localctx.args = function_arguments();
				State = 156; Match(T__8);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 13);
				{
				State = 159; Match(T__18);
				State = 160; _localctx.args = function_arguments();
				State = 161; Match(T__8);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sec(_localctx.args.list[0]); 
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 14);
				{
				State = 164; Match(T__19);
				State = 165; _localctx.args = function_arguments();
				State = 166; Match(T__8);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 15);
				{
				State = 169; Match(T__20);
				State = 170; _localctx.args = function_arguments();
				State = 171; Match(T__8);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 16);
				{
				State = 174; Match(T__21);
				State = 175; _localctx.args = function_arguments();
				State = 176; Match(T__8);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 17);
				{
				State = 179; Match(T__22);
				State = 180; _localctx.args = function_arguments();
				State = 181; Match(T__8);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 18);
				{
				State = 184; Match(T__23);
				State = 185; _localctx.args = function_arguments();
				State = 186; Match(T__8);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 19);
				{
				State = 189; Match(T__24);
				State = 190; _localctx.args = function_arguments();
				State = 191; Match(T__8);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 20);
				{
				State = 194; Match(T__25);
				State = 195; _localctx.args = function_arguments();
				State = 196; Match(T__8);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 21);
				{
				State = 199; Match(T__26);
				State = 200; _localctx.args = function_arguments();
				State = 201; Match(T__8);
				 Assert("gamma", 1, _localctx.args.list.Count); _localctx.value =  MathS.Gamma(_localctx.args.list[0]); 
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 22);
				{
				State = 204; Match(T__27);
				State = 205; _localctx.args = function_arguments();
				State = 206; Match(T__8);
				 Assert("derivative", 3, _localctx.args.list.Count); _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 23);
				{
				State = 209; Match(T__28);
				State = 210; _localctx.args = function_arguments();
				State = 211; Match(T__8);
				 Assert("integral", 3, _localctx.args.list.Count); _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 24);
				{
				State = 214; Match(T__29);
				State = 215; _localctx.args = function_arguments();
				State = 216; Match(T__8);
				 Assert("limit", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 25);
				{
				State = 219; Match(T__30);
				State = 220; _localctx.args = function_arguments();
				State = 221; Match(T__8);
				 Assert("limitleft", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Left); 
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 26);
				{
				State = 224; Match(T__31);
				State = 225; _localctx.args = function_arguments();
				State = 226; Match(T__8);
				 Assert("limitright", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Right); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AngouriMathParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; _localctx._expression = expression();
			State = 232; Match(Eof);
			 Result = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xEE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1E', '\n', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '$', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '%', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x37', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '<', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'H', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'K', '\v', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'W', '\n', '\a', '\f', '\a', '\xE', '\a', 'Z', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x65', '\n', '\t', '\f', 
		'\t', '\xE', '\t', 'h', '\v', '\t', '\x5', '\t', 'j', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xE8', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', '\x2', 
		'\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\x2', '\x2', '\x107', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '#', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\b', ';', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'L', '\x3', '\x2', '\x2', '\x2', '\xE', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'i', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\x5', '\x12', '\n', '\x2', '\x17', '\x18', '\a', 
		'\x3', '\x2', '\x2', '\x18', '\x19', '\b', '\x2', '\x1', '\x2', '\x19', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\x12', '\n', 
		'\x2', '\x1B', '\x1C', '\b', '\x2', '\x1', '\x2', '\x1C', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\a', '\x4', '\x2', '\x2', ' ', '!', '\x5', '\x2', 
		'\x2', '\x2', '!', '\"', '\b', '\x3', '\x1', '\x2', '\"', '$', '\x3', 
		'\x2', '\x2', '\x2', '#', '\x1F', '\x3', '\x2', '\x2', '\x2', '$', '%', 
		'\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\x5', '\x2', '\x2', '\x2', '(', ',', '\b', '\x4', '\x1', '\x2', 
		')', '*', '\x5', '\x4', '\x3', '\x2', '*', '+', '\b', '\x4', '\x1', '\x2', 
		'+', '-', '\x3', '\x2', '\x2', '\x2', ',', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\a', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\a', '\x5', '\x2', '\x2', '/', '\x30', '\x5', '\x6', 
		'\x4', '\x2', '\x30', '\x31', '\b', '\x5', '\x1', '\x2', '\x31', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\x6', '\x2', '\x2', 
		'\x33', '\x34', '\x5', '\x6', '\x4', '\x2', '\x34', '\x35', '\b', '\x5', 
		'\x1', '\x2', '\x35', '\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '<', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\x6', 
		'\x4', '\x2', '\x39', ':', '\b', '\x5', '\x1', '\x2', ':', '<', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x36', '\x3', '\x2', '\x2', '\x2', ';', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '<', '\t', '\x3', '\x2', '\x2', '\x2', '=', 
		'>', '\x5', '\b', '\x5', '\x2', '>', 'I', '\b', '\x6', '\x1', '\x2', '?', 
		'@', '\a', '\a', '\x2', '\x2', '@', '\x41', '\x5', '\b', '\x5', '\x2', 
		'\x41', '\x42', '\b', '\x6', '\x1', '\x2', '\x42', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x44', '\a', '\b', '\x2', '\x2', '\x44', '\x45', 
		'\x5', '\b', '\x5', '\x2', '\x45', '\x46', '\b', '\x6', '\x1', '\x2', 
		'\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', '?', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x43', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\v', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x5', '\n', '\x6', '\x2', 'M', 'X', '\b', 
		'\a', '\x1', '\x2', 'N', 'O', '\a', '\x6', '\x2', '\x2', 'O', 'P', '\x5', 
		'\n', '\x6', '\x2', 'P', 'Q', '\b', '\a', '\x1', '\x2', 'Q', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\x5', '\x2', '\x2', 'S', 'T', '\x5', 
		'\n', '\x6', '\x2', 'T', 'U', '\b', '\a', '\x1', '\x2', 'U', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'N', '\x3', '\x2', '\x2', '\x2', 'V', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', 
		'\\', '\x5', '\f', '\a', '\x2', '\\', ']', '\b', '\b', '\x1', '\x2', ']', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\xE', '\b', '\x2', 
		'_', '\x66', '\b', '\t', '\x1', '\x2', '`', '\x61', '\a', '\t', '\x2', 
		'\x2', '\x61', '\x62', '\x5', '\xE', '\b', '\x2', '\x62', '\x63', '\b', 
		'\t', '\x1', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'i', '^', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'j', '\x11', '\x3', '\x2', '\x2', '\x2', 'k', 'l', 
		'\a', '$', '\x2', '\x2', 'l', '\xE8', '\b', '\n', '\x1', '\x2', 'm', 'n', 
		'\a', '%', '\x2', '\x2', 'n', '\xE8', '\b', '\n', '\x1', '\x2', 'o', 'p', 
		'\a', '\n', '\x2', '\x2', 'p', 'q', '\x5', '\xE', '\b', '\x2', 'q', 'r', 
		'\a', '\v', '\x2', '\x2', 'r', 's', '\b', '\n', '\x1', '\x2', 's', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\f', '\x2', '\x2', 'u', 'v', 
		'\x5', '\x10', '\t', '\x2', 'v', 'w', '\a', '\v', '\x2', '\x2', 'w', 'x', 
		'\b', '\n', '\x1', '\x2', 'x', '\xE8', '\x3', '\x2', '\x2', '\x2', 'y', 
		'z', '\a', '\r', '\x2', '\x2', 'z', '{', '\x5', '\x10', '\t', '\x2', '{', 
		'|', '\a', '\v', '\x2', '\x2', '|', '}', '\b', '\n', '\x1', '\x2', '}', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\xE', '\x2', '\x2', 
		'\x7F', '\x80', '\x5', '\x10', '\t', '\x2', '\x80', '\x81', '\a', '\v', 
		'\x2', '\x2', '\x81', '\x82', '\b', '\n', '\x1', '\x2', '\x82', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\xF', '\x2', '\x2', 
		'\x84', '\x85', '\x5', '\x10', '\t', '\x2', '\x85', '\x86', '\a', '\v', 
		'\x2', '\x2', '\x86', '\x87', '\b', '\n', '\x1', '\x2', '\x87', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x10', '\x2', '\x2', 
		'\x89', '\x8A', '\x5', '\x10', '\t', '\x2', '\x8A', '\x8B', '\a', '\v', 
		'\x2', '\x2', '\x8B', '\x8C', '\b', '\n', '\x1', '\x2', '\x8C', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x11', '\x2', '\x2', 
		'\x8E', '\x8F', '\x5', '\x10', '\t', '\x2', '\x8F', '\x90', '\a', '\v', 
		'\x2', '\x2', '\x90', '\x91', '\b', '\n', '\x1', '\x2', '\x91', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x12', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '\x10', '\t', '\x2', '\x94', '\x95', '\a', '\v', 
		'\x2', '\x2', '\x95', '\x96', '\b', '\n', '\x1', '\x2', '\x96', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x13', '\x2', '\x2', 
		'\x98', '\x99', '\x5', '\x10', '\t', '\x2', '\x99', '\x9A', '\a', '\v', 
		'\x2', '\x2', '\x9A', '\x9B', '\b', '\n', '\x1', '\x2', '\x9B', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x14', '\x2', '\x2', 
		'\x9D', '\x9E', '\x5', '\x10', '\t', '\x2', '\x9E', '\x9F', '\a', '\v', 
		'\x2', '\x2', '\x9F', '\xA0', '\b', '\n', '\x1', '\x2', '\xA0', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x15', '\x2', '\x2', 
		'\xA2', '\xA3', '\x5', '\x10', '\t', '\x2', '\xA3', '\xA4', '\a', '\v', 
		'\x2', '\x2', '\xA4', '\xA5', '\b', '\n', '\x1', '\x2', '\xA5', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x16', '\x2', '\x2', 
		'\xA7', '\xA8', '\x5', '\x10', '\t', '\x2', '\xA8', '\xA9', '\a', '\v', 
		'\x2', '\x2', '\xA9', '\xAA', '\b', '\n', '\x1', '\x2', '\xAA', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x17', '\x2', '\x2', 
		'\xAC', '\xAD', '\x5', '\x10', '\t', '\x2', '\xAD', '\xAE', '\a', '\v', 
		'\x2', '\x2', '\xAE', '\xAF', '\b', '\n', '\x1', '\x2', '\xAF', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x18', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '\x10', '\t', '\x2', '\xB2', '\xB3', '\a', '\v', 
		'\x2', '\x2', '\xB3', '\xB4', '\b', '\n', '\x1', '\x2', '\xB4', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x19', '\x2', '\x2', 
		'\xB6', '\xB7', '\x5', '\x10', '\t', '\x2', '\xB7', '\xB8', '\a', '\v', 
		'\x2', '\x2', '\xB8', '\xB9', '\b', '\n', '\x1', '\x2', '\xB9', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x1A', '\x2', '\x2', 
		'\xBB', '\xBC', '\x5', '\x10', '\t', '\x2', '\xBC', '\xBD', '\a', '\v', 
		'\x2', '\x2', '\xBD', '\xBE', '\b', '\n', '\x1', '\x2', '\xBE', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x1B', '\x2', '\x2', 
		'\xC0', '\xC1', '\x5', '\x10', '\t', '\x2', '\xC1', '\xC2', '\a', '\v', 
		'\x2', '\x2', '\xC2', '\xC3', '\b', '\n', '\x1', '\x2', '\xC3', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1C', '\x2', '\x2', 
		'\xC5', '\xC6', '\x5', '\x10', '\t', '\x2', '\xC6', '\xC7', '\a', '\v', 
		'\x2', '\x2', '\xC7', '\xC8', '\b', '\n', '\x1', '\x2', '\xC8', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x1D', '\x2', '\x2', 
		'\xCA', '\xCB', '\x5', '\x10', '\t', '\x2', '\xCB', '\xCC', '\a', '\v', 
		'\x2', '\x2', '\xCC', '\xCD', '\b', '\n', '\x1', '\x2', '\xCD', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x1E', '\x2', '\x2', 
		'\xCF', '\xD0', '\x5', '\x10', '\t', '\x2', '\xD0', '\xD1', '\a', '\v', 
		'\x2', '\x2', '\xD1', '\xD2', '\b', '\n', '\x1', '\x2', '\xD2', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x1F', '\x2', '\x2', 
		'\xD4', '\xD5', '\x5', '\x10', '\t', '\x2', '\xD5', '\xD6', '\a', '\v', 
		'\x2', '\x2', '\xD6', '\xD7', '\b', '\n', '\x1', '\x2', '\xD7', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', ' ', '\x2', '\x2', '\xD9', 
		'\xDA', '\x5', '\x10', '\t', '\x2', '\xDA', '\xDB', '\a', '\v', '\x2', 
		'\x2', '\xDB', '\xDC', '\b', '\n', '\x1', '\x2', '\xDC', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '!', '\x2', '\x2', '\xDE', 
		'\xDF', '\x5', '\x10', '\t', '\x2', '\xDF', '\xE0', '\a', '\v', '\x2', 
		'\x2', '\xE0', '\xE1', '\b', '\n', '\x1', '\x2', '\xE1', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\"', '\x2', '\x2', '\xE3', 
		'\xE4', '\x5', '\x10', '\t', '\x2', '\xE4', '\xE5', '\a', '\v', '\x2', 
		'\x2', '\xE5', '\xE6', '\b', '\n', '\x1', '\x2', '\xE6', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', 'k', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'm', '\x3', '\x2', '\x2', '\x2', '\xE7', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', 't', '\x3', '\x2', '\x2', '\x2', '\xE7', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '~', '\x3', '\x2', '\x2', '\x2', '\xE7', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\x88', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\xE7', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\x97', '\x3', '\x2', '\x2', '\x2', '\xE7', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\xE', '\b', '\x2', '\xEA', 
		'\xEB', '\a', '\x2', '\x2', '\x3', '\xEB', '\xEC', '\b', '\v', '\x1', 
		'\x2', '\xEC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1D', '%', 
		',', '\x36', ';', 'G', 'I', 'V', 'X', '\x66', 'i', '\xE7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AngouriMath.Core.Antlr
