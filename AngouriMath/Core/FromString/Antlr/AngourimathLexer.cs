//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g 2020-05-03 18:49:27

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Antlr 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class AngourimathLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int COMMENT=4;
	public const int EXPONENT=5;
	public const int ID=6;
	public const int NEWLINE=7;
	public const int NUMBER=8;
	public const int WS=9;

    // delegates
    // delegators

	public AngourimathLexer()
	{
		OnCreated();
	}

	public AngourimathLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public AngourimathLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 1);
    	TraceIn("T__10", 1);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:9:7: ( '(' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:9:9: '('
    		{
    		DebugLocation(9, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 1);
    		LeaveRule("T__10", 1);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 2);
    	TraceIn("T__11", 2);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:10:7: ( ')' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:10:9: ')'
    		{
    		DebugLocation(10, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 2);
    		LeaveRule("T__11", 2);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 3);
    	TraceIn("T__12", 3);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:11:7: ( '*' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:11:9: '*'
    		{
    		DebugLocation(11, 9);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 3);
    		LeaveRule("T__12", 3);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 4);
    	TraceIn("T__13", 4);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:12:7: ( '+' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:12:9: '+'
    		{
    		DebugLocation(12, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 4);
    		LeaveRule("T__13", 4);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 5);
    	TraceIn("T__14", 5);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:13:7: ( ',' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:13:9: ','
    		{
    		DebugLocation(13, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 5);
    		LeaveRule("T__14", 5);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 6);
    	TraceIn("T__15", 6);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:14:7: ( '-' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:14:9: '-'
    		{
    		DebugLocation(14, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 6);
    		LeaveRule("T__15", 6);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 7);
    	TraceIn("T__16", 7);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:15:7: ( '/' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:15:9: '/'
    		{
    		DebugLocation(15, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 7);
    		LeaveRule("T__16", 7);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 8);
    	TraceIn("T__17", 8);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:16:7: ( '^' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:16:9: '^'
    		{
    		DebugLocation(16, 9);
    		Match('^'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 8);
    		LeaveRule("T__17", 8);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 9);
    	TraceIn("NEWLINE", 9);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:28:10: ( ( '\\r' )? '\\n' )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:28:13: ( '\\r' )? '\\n'
    		{
    		DebugLocation(28, 13);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:28:13: ( '\\r' )?
    		int alt1=2;
    		try { DebugEnterSubRule(1);
    		try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    		int LA1_1 = input.LA(1);

    		if ((LA1_1=='\r'))
    		{
    			alt1 = 1;
    		}
    		} finally { DebugExitDecision(1); }
    		switch (alt1)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:28:13: '\\r'
    			{
    			DebugLocation(28, 13);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(1); }

    		DebugLocation(28, 18);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 9);
    		LeaveRule("NEWLINE", 9);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 10);
    	TraceIn("ID", 10);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:31:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' )+ ( '_' ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' | '0' .. '9' )+ )? )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:31:7: ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' )+ ( '_' ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' | '0' .. '9' )+ )?
    		{
    		DebugLocation(31, 7);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:31:7: ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if ((LA2_1=='?'||(LA2_1>='A' && LA2_1<='Z')||(LA2_1>='a' && LA2_1<='z')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    				{
    				DebugLocation(31, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }

    		DebugLocation(31, 46);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:31:46: ( '_' ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' | '0' .. '9' )+ )?
    		int alt4=2;
    		try { DebugEnterSubRule(4);
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		int LA4_1 = input.LA(1);

    		if ((LA4_1=='_'))
    		{
    			alt4 = 1;
    		}
    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:31:47: '_' ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' | '0' .. '9' )+
    			{
    			DebugLocation(31, 47);
    			Match('_'); 
    			DebugLocation(31, 51);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:31:51: ( 'a' .. 'z' | 'A' .. 'Z' | '?' .. '?' | '?' .. '?' | '0' .. '9' )+
    			int cnt3=0;
    			try { DebugEnterSubRule(3);
    			while (true)
    			{
    				int alt3=2;
    				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    				int LA3_1 = input.LA(1);

    				if (((LA3_1>='0' && LA3_1<='9')||LA3_1=='?'||(LA3_1>='A' && LA3_1<='Z')||(LA3_1>='a' && LA3_1<='z')))
    				{
    					alt3 = 1;
    				}


    				} finally { DebugExitDecision(3); }
    				switch (alt3)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    					{
    					DebugLocation(31, 51);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt3 >= 1)
    						goto loop3;

    					EarlyExitException eee3 = new EarlyExitException( 3, input );
    					DebugRecognitionException(eee3);
    					throw eee3;
    				}
    				cnt3++;
    			}
    			loop3:
    				;

    			} finally { DebugExitSubRule(3); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(4); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 10);
    		LeaveRule("ID", 10);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NUMBER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NUMBER() {}

    // $ANTLR start "NUMBER"
    [GrammarRule("NUMBER")]
    private void mNUMBER()
    {
    	EnterRule_NUMBER();
    	EnterRule("NUMBER", 11);
    	TraceIn("NUMBER", 11);
    		try
    		{
    		int _type = NUMBER;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'i' )? | ( '.' )? ( '0' .. '9' )+ ( EXPONENT )? ( 'i' )? )
    		int alt13=2;
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		try
    		{
    			alt13 = dfa13.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:7: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'i' )?
    			{
    			DebugLocation(35, 7);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:7: ( '0' .. '9' )+
    			int cnt5=0;
    			try { DebugEnterSubRule(5);
    			while (true)
    			{
    				int alt5=2;
    				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    				int LA5_1 = input.LA(1);

    				if (((LA5_1>='0' && LA5_1<='9')))
    				{
    					alt5 = 1;
    				}


    				} finally { DebugExitDecision(5); }
    				switch (alt5)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    					{
    					DebugLocation(35, 7);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt5 >= 1)
    						goto loop5;

    					EarlyExitException eee5 = new EarlyExitException( 5, input );
    					DebugRecognitionException(eee5);
    					throw eee5;
    				}
    				cnt5++;
    			}
    			loop5:
    				;

    			} finally { DebugExitSubRule(5); }

    			DebugLocation(35, 19);
    			Match('.'); 
    			DebugLocation(35, 23);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:23: ( '0' .. '9' )*
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_1 = input.LA(1);

    				if (((LA6_1>='0' && LA6_1<='9')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch ( alt6 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    					{
    					DebugLocation(35, 23);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop6;
    				}
    			}

    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(35, 35);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:35: ( EXPONENT )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_1 = input.LA(1);

    			if ((LA7_1=='E'||LA7_1=='e'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:35: EXPONENT
    				{
    				DebugLocation(35, 35);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }

    			DebugLocation(35, 45);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:45: ( 'i' )?
    			int alt8=2;
    			try { DebugEnterSubRule(8);
    			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    			int LA8_1 = input.LA(1);

    			if ((LA8_1=='i'))
    			{
    				alt8 = 1;
    			}
    			} finally { DebugExitDecision(8); }
    			switch (alt8)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:35:45: 'i'
    				{
    				DebugLocation(35, 45);
    				Match('i'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(8); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:7: ( '.' )? ( '0' .. '9' )+ ( EXPONENT )? ( 'i' )?
    			{
    			DebugLocation(36, 7);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:7: ( '.' )?
    			int alt9=2;
    			try { DebugEnterSubRule(9);
    			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    			int LA9_1 = input.LA(1);

    			if ((LA9_1=='.'))
    			{
    				alt9 = 1;
    			}
    			} finally { DebugExitDecision(9); }
    			switch (alt9)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:7: '.'
    				{
    				DebugLocation(36, 7);
    				Match('.'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(9); }

    			DebugLocation(36, 12);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:12: ( '0' .. '9' )+
    			int cnt10=0;
    			try { DebugEnterSubRule(10);
    			while (true)
    			{
    				int alt10=2;
    				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    				int LA10_1 = input.LA(1);

    				if (((LA10_1>='0' && LA10_1<='9')))
    				{
    					alt10 = 1;
    				}


    				} finally { DebugExitDecision(10); }
    				switch (alt10)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    					{
    					DebugLocation(36, 12);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt10 >= 1)
    						goto loop10;

    					EarlyExitException eee10 = new EarlyExitException( 10, input );
    					DebugRecognitionException(eee10);
    					throw eee10;
    				}
    				cnt10++;
    			}
    			loop10:
    				;

    			} finally { DebugExitSubRule(10); }

    			DebugLocation(36, 24);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:24: ( EXPONENT )?
    			int alt11=2;
    			try { DebugEnterSubRule(11);
    			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    			int LA11_1 = input.LA(1);

    			if ((LA11_1=='E'||LA11_1=='e'))
    			{
    				alt11 = 1;
    			}
    			} finally { DebugExitDecision(11); }
    			switch (alt11)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:24: EXPONENT
    				{
    				DebugLocation(36, 24);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(11); }

    			DebugLocation(36, 34);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:34: ( 'i' )?
    			int alt12=2;
    			try { DebugEnterSubRule(12);
    			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    			int LA12_1 = input.LA(1);

    			if ((LA12_1=='i'))
    			{
    				alt12 = 1;
    			}
    			} finally { DebugExitDecision(12); }
    			switch (alt12)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:36:34: 'i'
    				{
    				DebugLocation(36, 34);
    				Match('i'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(12); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NUMBER", 11);
    		LeaveRule("NUMBER", 11);
    		LeaveRule_NUMBER();
        }
    }
    // $ANTLR end "NUMBER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 12);
    	TraceIn("COMMENT", 12);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:40:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
    		int alt17=2;
    		try { DebugEnterDecision(17, decisionCanBacktrack[17]);
    		int LA17_1 = input.LA(1);

    		if ((LA17_1=='/'))
    		{
    			int LA17_2 = input.LA(2);

    			if ((LA17_2=='/'))
    			{
    				alt17 = 1;
    			}
    			else if ((LA17_2=='*'))
    			{
    				alt17 = 2;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		} finally { DebugExitDecision(17); }
    		switch (alt17)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:40:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(40, 9);
    			Match("//"); 

    			DebugLocation(40, 14);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:40:14: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(14);
    			while (true)
    			{
    				int alt14=2;
    				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    				int LA14_1 = input.LA(1);

    				if (((LA14_1>='\u0000' && LA14_1<='\t')||(LA14_1>='\u000B' && LA14_1<='\f')||(LA14_1>='\u000E' && LA14_1<='\uFFFF')))
    				{
    					alt14 = 1;
    				}


    				} finally { DebugExitDecision(14); }
    				switch ( alt14 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    					{
    					DebugLocation(40, 14);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop14;
    				}
    			}

    			loop14:
    				;

    			} finally { DebugExitSubRule(14); }

    			DebugLocation(40, 28);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:40:28: ( '\\r' )?
    			int alt15=2;
    			try { DebugEnterSubRule(15);
    			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
    			int LA15_1 = input.LA(1);

    			if ((LA15_1=='\r'))
    			{
    				alt15 = 1;
    			}
    			} finally { DebugExitDecision(15); }
    			switch (alt15)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:40:28: '\\r'
    				{
    				DebugLocation(40, 28);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(15); }

    			DebugLocation(40, 34);
    			Match('\n'); 
    			DebugLocation(40, 39);
    			 _channel = Hidden; 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:41:9: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(41, 9);
    			Match("/*"); 

    			DebugLocation(41, 14);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:41:14: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(16);
    			while (true)
    			{
    				int alt16=2;
    				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
    				int LA16_1 = input.LA(1);

    				if ((LA16_1=='*'))
    				{
    					int LA16_2 = input.LA(2);

    					if ((LA16_2=='/'))
    					{
    						alt16 = 2;
    					}
    					else if (((LA16_2>='\u0000' && LA16_2<='.')||(LA16_2>='0' && LA16_2<='\uFFFF')))
    					{
    						alt16 = 1;
    					}


    				}
    				else if (((LA16_1>='\u0000' && LA16_1<=')')||(LA16_1>='+' && LA16_1<='\uFFFF')))
    				{
    					alt16 = 1;
    				}


    				} finally { DebugExitDecision(16); }
    				switch ( alt16 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:41:42: .
    					{
    					DebugLocation(41, 42);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop16;
    				}
    			}

    			loop16:
    				;

    			} finally { DebugExitSubRule(16); }

    			DebugLocation(41, 47);
    			Match("*/"); 

    			DebugLocation(41, 52);
    			 _channel = Hidden; 

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 12);
    		LeaveRule("COMMENT", 12);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 13);
    	TraceIn("WS", 13);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:44:4: ( ( ' ' | '\\t' )+ )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:44:6: ( ' ' | '\\t' )+
    		{
    		DebugLocation(44, 6);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:44:6: ( ' ' | '\\t' )+
    		int cnt18=0;
    		try { DebugEnterSubRule(18);
    		while (true)
    		{
    			int alt18=2;
    			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
    			int LA18_1 = input.LA(1);

    			if ((LA18_1=='\t'||LA18_1==' '))
    			{
    				alt18 = 1;
    			}


    			} finally { DebugExitDecision(18); }
    			switch (alt18)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    				{
    				DebugLocation(44, 6);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt18 >= 1)
    					goto loop18;

    				EarlyExitException eee18 = new EarlyExitException( 18, input );
    				DebugRecognitionException(eee18);
    				throw eee18;
    			}
    			cnt18++;
    		}
    		loop18:
    			;

    		} finally { DebugExitSubRule(18); }

    		DebugLocation(44, 20);
    		 _channel = Hidden; 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 13);
    		LeaveRule("WS", 13);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXPONENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXPONENT() {}

    // $ANTLR start "EXPONENT"
    [GrammarRule("EXPONENT")]
    private void mEXPONENT()
    {
    	EnterRule_EXPONENT();
    	EnterRule("EXPONENT", 14);
    	TraceIn("EXPONENT", 14);
    		try
    		{
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:49:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:49:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    		{
    		DebugLocation(49, 12);
    		if (input.LA(1)=='E'||input.LA(1)=='e')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(49, 22);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:49:22: ( '+' | '-' )?
    		int alt19=2;
    		try { DebugEnterSubRule(19);
    		try { DebugEnterDecision(19, decisionCanBacktrack[19]);
    		int LA19_1 = input.LA(1);

    		if ((LA19_1=='+'||LA19_1=='-'))
    		{
    			alt19 = 1;
    		}
    		} finally { DebugExitDecision(19); }
    		switch (alt19)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    			{
    			DebugLocation(49, 22);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(19); }

    		DebugLocation(49, 33);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:49:33: ( '0' .. '9' )+
    		int cnt20=0;
    		try { DebugEnterSubRule(20);
    		while (true)
    		{
    			int alt20=2;
    			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
    			int LA20_1 = input.LA(1);

    			if (((LA20_1>='0' && LA20_1<='9')))
    			{
    				alt20 = 1;
    			}


    			} finally { DebugExitDecision(20); }
    			switch (alt20)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:
    				{
    				DebugLocation(49, 33);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt20 >= 1)
    					goto loop20;

    				EarlyExitException eee20 = new EarlyExitException( 20, input );
    				DebugRecognitionException(eee20);
    				throw eee20;
    			}
    			cnt20++;
    		}
    		loop20:
    			;

    		} finally { DebugExitSubRule(20); }


    		}

    	}
    	finally
    	{
    		TraceOut("EXPONENT", 14);
    		LeaveRule("EXPONENT", 14);
    		LeaveRule_EXPONENT();
        }
    }
    // $ANTLR end "EXPONENT"

    public override void mTokens()
    {
    	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:8: ( T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | NEWLINE | ID | NUMBER | COMMENT | WS )
    	int alt21=13;
    	try { DebugEnterDecision(21, decisionCanBacktrack[21]);
    	switch (input.LA(1))
    	{
    	case '(':
    		{
    		alt21 = 1;
    		}
    		break;
    	case ')':
    		{
    		alt21 = 2;
    		}
    		break;
    	case '*':
    		{
    		alt21 = 3;
    		}
    		break;
    	case '+':
    		{
    		alt21 = 4;
    		}
    		break;
    	case ',':
    		{
    		alt21 = 5;
    		}
    		break;
    	case '-':
    		{
    		alt21 = 6;
    		}
    		break;
    	case '/':
    		{
    		int LA21_2 = input.LA(2);

    		if ((LA21_2=='*'||LA21_2=='/'))
    		{
    			alt21 = 12;
    		}

    		else
    		{
    			alt21 = 7;
    		}

    		}
    		break;
    	case '^':
    		{
    		alt21 = 8;
    		}
    		break;
    	case '\n':
    	case '\r':
    		{
    		alt21 = 9;
    		}
    		break;
    	case '?':
    	case 'A':
    	case 'B':
    	case 'C':
    	case 'D':
    	case 'E':
    	case 'F':
    	case 'G':
    	case 'H':
    	case 'I':
    	case 'J':
    	case 'K':
    	case 'L':
    	case 'M':
    	case 'N':
    	case 'O':
    	case 'P':
    	case 'Q':
    	case 'R':
    	case 'S':
    	case 'T':
    	case 'U':
    	case 'V':
    	case 'W':
    	case 'X':
    	case 'Y':
    	case 'Z':
    	case 'a':
    	case 'b':
    	case 'c':
    	case 'd':
    	case 'e':
    	case 'f':
    	case 'g':
    	case 'h':
    	case 'i':
    	case 'j':
    	case 'k':
    	case 'l':
    	case 'm':
    	case 'n':
    	case 'o':
    	case 'p':
    	case 'q':
    	case 'r':
    	case 's':
    	case 't':
    	case 'u':
    	case 'v':
    	case 'w':
    	case 'x':
    	case 'y':
    	case 'z':
    		{
    		alt21 = 10;
    		}
    		break;
    	case '.':
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt21 = 11;
    		}
    		break;
    	case '\t':
    	case ' ':
    		{
    		alt21 = 13;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(21); }
    	switch (alt21)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:10: T__10
    		{
    		DebugLocation(1, 10);
    		mT__10(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:16: T__11
    		{
    		DebugLocation(1, 16);
    		mT__11(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:22: T__12
    		{
    		DebugLocation(1, 22);
    		mT__12(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:28: T__13
    		{
    		DebugLocation(1, 28);
    		mT__13(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:34: T__14
    		{
    		DebugLocation(1, 34);
    		mT__14(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:40: T__15
    		{
    		DebugLocation(1, 40);
    		mT__15(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:46: T__16
    		{
    		DebugLocation(1, 46);
    		mT__16(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:52: T__17
    		{
    		DebugLocation(1, 52);
    		mT__17(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:58: NEWLINE
    		{
    		DebugLocation(1, 58);
    		mNEWLINE(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:66: ID
    		{
    		DebugLocation(1, 66);
    		mID(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:69: NUMBER
    		{
    		DebugLocation(1, 69);
    		mNUMBER(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:76: COMMENT
    		{
    		DebugLocation(1, 76);
    		mCOMMENT(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:1:84: WS
    		{
    		DebugLocation(1, 84);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x1\xFFFF\x1\x2\x2\xFFFF";
		private const string DFA13_eofS =
			"\x4\xFFFF";
		private const string DFA13_minS =
			"\x2\x2E\x2\xFFFF";
		private const string DFA13_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA13_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA13_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "34:1: NUMBER : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'i' )? | ( '.' )? ( '0' .. '9' )+ ( EXPONENT )? ( 'i' )? );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Antlr 
