//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Core\FromString\Antlr\Angourimath.g by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using System;
    using System.Linq;
    using System.Collections;
    using AngouriMath;
    using AngouriMath.Core;
    using System.Globalization;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AngourimathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NEWLINE=9, 
		ID=10, NUMBER=11, COMMENT=12, WS=13;
	public const int
		RULE_statement = 0, RULE_expression = 1, RULE_power_expression = 2, RULE_power_list = 3, 
		RULE_unary_expression = 4, RULE_mult_expression = 5, RULE_sum_expression = 6, 
		RULE_atom = 7, RULE_function_arguments = 8;
	public static readonly string[] ruleNames = {
		"statement", "expression", "power_expression", "power_list", "unary_expression", 
		"mult_expression", "sum_expression", "atom", "function_arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'-'", "'+'", "'*'", "'/'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NEWLINE", "ID", 
		"NUMBER", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Angourimath.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AngourimathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }

		public AngourimathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AngourimathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AngourimathParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; _localctx._expression = expression();
			State = 19; Match(Eof);
			 Result = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Entity value;
		public Sum_expressionContext s;
		public Sum_expressionContext sum_expression() {
			return GetRuleContext<Sum_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; _localctx.s = sum_expression();
			 _localctx.value =  _localctx.s.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_expressionContext : ParserRuleContext {
		public Entity value;
		public AtomContext _atom;
		public Power_listContext _power_list;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Power_listContext power_list() {
			return GetRuleContext<Power_listContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_power_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; _localctx._atom = atom();
			 _localctx.value =  _localctx._atom.value; 
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 27; _localctx._power_list = power_list();

						var list = _localctx._power_list.value;
						_localctx.value =  list.Last();
						list.RemoveAt(list.Count - 1);
						list.Reverse(); 
						list.Add(_localctx._atom.value);
						foreach(var p in list) { _localctx.value =  MathS.Pow(p, _localctx.value); }
						
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_listContext : ParserRuleContext {
		public List<Entity> value;
		public AtomContext _atom;
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public Power_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterPower_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitPower_list(this);
		}
	}

	[RuleVersion(0)]
	public Power_listContext power_list() {
		Power_listContext _localctx = new Power_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_power_list);

				_localctx.value =  new List<Entity>();
			
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32; Match(T__0);
				State = 33; _localctx._atom = atom();
				 _localctx.value.Add(_localctx._atom.value); 
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Entity value;
		public Power_expressionContext p;
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_unary_expression);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 40; Match(T__1);
					State = 41; _localctx.p = power_expression();
					 _localctx.value =  -_localctx.p.value; 
					}
					break;
				case T__2:
					{
					State = 44; Match(T__2);
					State = 45; _localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__5:
			case ID:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; _localctx.p = power_expression();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_expressionContext : ParserRuleContext {
		public Entity value;
		public Unary_expressionContext u1;
		public Unary_expressionContext u2;
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; _localctx.u1 = unary_expression();
			 _localctx.value =  _localctx.u1.value; 
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3 || _la==T__4) {
				{
				State = 65;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 57; Match(T__3);
					State = 58; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value * _localctx.u2.value; 
					}
					break;
				case T__4:
					{
					State = 61; Match(T__4);
					State = 62; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value / _localctx.u2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sum_expressionContext : ParserRuleContext {
		public Entity value;
		public Mult_expressionContext m1;
		public Mult_expressionContext m2;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_sum_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; _localctx.m1 = mult_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__2) {
				{
				State = 80;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 72; Match(T__2);
					State = 73; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value + _localctx.m2.value; 
					}
					break;
				case T__1:
					{
					State = 76; Match(T__1);
					State = 77; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value - _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public Entity value;
		public IToken _NUMBER;
		public IToken _ID;
		public ExpressionContext _expression;
		public Function_argumentsContext args;
		public ITerminalNode NUMBER() { return GetToken(AngourimathParser.NUMBER, 0); }
		public ITerminalNode ID() { return GetToken(AngourimathParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; _localctx._NUMBER = Match(NUMBER);
				 _localctx.value =  Number.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; _localctx._ID = Match(ID);
				 _localctx.value =  new VariableEntity((_localctx._ID!=null?_localctx._ID.Text:null)); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; Match(T__5);
				State = 90; _localctx._expression = expression();
				State = 91; Match(T__6);
				 _localctx.value =  _localctx._expression.value; 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; _localctx._ID = Match(ID);
				State = 95; Match(T__5);
				State = 96; _localctx.args = function_arguments();
				State = 97; Match(T__6);
				 _localctx.value =  new FunctionEntity((_localctx._ID!=null?_localctx._ID.Text:null) + 'f'); foreach(var arg in _localctx.args.list) { _localctx.value.Children.Add(arg); } 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 100; _localctx._ID = Match(ID);
				State = 101; Match(T__5);
				State = 102; Match(T__6);
				 _localctx.value =  new FunctionEntity((_localctx._ID!=null?_localctx._ID.Text:null) + 'f'); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		public List<Entity> list;
		public ExpressionContext e;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngourimathListener typedListener = listener as IAngourimathListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_arguments);

				_localctx.list =  new List<Entity>();
			
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; _localctx.e = expression();
			 _localctx.list.Add(_localctx.e.value); 
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 108; Match(T__7);
				State = 109; _localctx.e = expression();
				 _localctx.list.Add(_localctx.e.value); 
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', 'x', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '!', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x6', '\x5', '\'', '\n', '\x5', '\r', '\x5', '\xE', 
		'\x5', '(', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x33', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x38', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x44', '\n', '\a', '\f', '\a', '\xE', '\a', 'G', '\v', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'S', '\n', '\b', '\f', '\b', '\xE', '\b', 'V', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', 'k', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 's', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'v', '\v', '\n', '\x3', '\n', '\x2', '\x2', 
		'\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', 
		'\x2', '\x2', '{', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\b', '&', '\x3', '\x2', '\x2', '\x2', '\n', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x39', '\x3', '\x2', '\x2', '\x2', '\xE', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'j', '\x3', '\x2', '\x2', '\x2', '\x12', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', 
		'\x16', '\a', '\x2', '\x2', '\x3', '\x16', '\x17', '\b', '\x2', '\x1', 
		'\x2', '\x17', '\x3', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x5', 
		'\xE', '\b', '\x2', '\x19', '\x1A', '\b', '\x3', '\x1', '\x2', '\x1A', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\x10', '\t', 
		'\x2', '\x1C', ' ', '\b', '\x4', '\x1', '\x2', '\x1D', '\x1E', '\x5', 
		'\b', '\x5', '\x2', '\x1E', '\x1F', '\b', '\x4', '\x1', '\x2', '\x1F', 
		'!', '\x3', '\x2', '\x2', '\x2', ' ', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\a', '\x3', '\x2', '\x2', '#', '$', '\x5', '\x10', 
		'\t', '\x2', '$', '%', '\b', '\x5', '\x1', '\x2', '%', '\'', '\x3', '\x2', 
		'\x2', '\x2', '&', '\"', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', 
		'\x2', '\x2', '\x2', ')', '\t', '\x3', '\x2', '\x2', '\x2', '*', '+', 
		'\a', '\x4', '\x2', '\x2', '+', ',', '\x5', '\x6', '\x4', '\x2', ',', 
		'-', '\b', '\x6', '\x1', '\x2', '-', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\a', '\x5', '\x2', '\x2', '/', '\x30', '\x5', '\x6', '\x4', 
		'\x2', '\x30', '\x31', '\b', '\x6', '\x1', '\x2', '\x31', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '*', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x33', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\x5', '\x6', '\x4', '\x2', '\x35', '\x36', '\b', 
		'\x6', '\x1', '\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x37', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\v', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x5', '\n', 
		'\x6', '\x2', ':', '\x45', '\b', '\a', '\x1', '\x2', ';', '<', '\a', '\x6', 
		'\x2', '\x2', '<', '=', '\x5', '\n', '\x6', '\x2', '=', '>', '\b', '\a', 
		'\x1', '\x2', '>', '\x44', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', 
		'\a', '\x2', '\x2', '@', '\x41', '\x5', '\n', '\x6', '\x2', '\x41', '\x42', 
		'\b', '\a', '\x1', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', ';', '\x3', '\x2', '\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x5', '\f', '\a', '\x2', 'I', 'T', '\b', '\b', '\x1', '\x2', 
		'J', 'K', '\a', '\x5', '\x2', '\x2', 'K', 'L', '\x5', '\f', '\a', '\x2', 
		'L', 'M', '\b', '\b', '\x1', '\x2', 'M', 'S', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\a', '\x4', '\x2', '\x2', 'O', 'P', '\x5', '\f', '\a', '\x2', 
		'P', 'Q', '\b', '\b', '\x1', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'J', '\x3', '\x2', '\x2', '\x2', 'R', 'N', '\x3', '\x2', '\x2', '\x2', 
		'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\r', '\x2', 
		'\x2', 'X', 'k', '\b', '\t', '\x1', '\x2', 'Y', 'Z', '\a', '\f', '\x2', 
		'\x2', 'Z', 'k', '\b', '\t', '\x1', '\x2', '[', '\\', '\a', '\b', '\x2', 
		'\x2', '\\', ']', '\x5', '\x4', '\x3', '\x2', ']', '^', '\a', '\t', '\x2', 
		'\x2', '^', '_', '\b', '\t', '\x1', '\x2', '_', 'k', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\a', '\f', '\x2', '\x2', '\x61', '\x62', '\a', '\b', 
		'\x2', '\x2', '\x62', '\x63', '\x5', '\x12', '\n', '\x2', '\x63', '\x64', 
		'\a', '\t', '\x2', '\x2', '\x64', '\x65', '\b', '\t', '\x1', '\x2', '\x65', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\f', '\x2', '\x2', 
		'g', 'h', '\a', '\b', '\x2', '\x2', 'h', 'i', '\a', '\t', '\x2', '\x2', 
		'i', 'k', '\b', '\t', '\x1', '\x2', 'j', 'W', '\x3', '\x2', '\x2', '\x2', 
		'j', 'Y', '\x3', '\x2', '\x2', '\x2', 'j', '[', '\x3', '\x2', '\x2', '\x2', 
		'j', '`', '\x3', '\x2', '\x2', '\x2', 'j', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\x11', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', '\x4', 
		'\x3', '\x2', 'm', 't', '\b', '\n', '\x1', '\x2', 'n', 'o', '\a', '\n', 
		'\x2', '\x2', 'o', 'p', '\x5', '\x4', '\x3', '\x2', 'p', 'q', '\b', '\n', 
		'\x1', '\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'n', '\x3', '\x2', 
		'\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', '\f', ' ', 
		'(', '\x32', '\x37', '\x43', '\x45', 'R', 'T', 'j', 't',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
