//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g 2020-05-03 18:49:27

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


    using System;
    using System.Linq;
    using System.Collections;
    using AngouriMath;
    using AngouriMath.Core;
    using System.Globalization;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Antlr 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class AngourimathParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "EXPONENT", "ID", "NEWLINE", "NUMBER", "WS", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "'^'"
	};
	public const int EOF=-1;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int COMMENT=4;
	public const int EXPONENT=5;
	public const int ID=6;
	public const int NEWLINE=7;
	public const int NUMBER=8;
	public const int WS=9;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, false, false, false, false, false, false, false
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public AngourimathParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public AngourimathParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return AngourimathParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g"; } }


	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:50:1: statement : expression EOF ;
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
	    Entity expression1 = default(Entity);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(50, 4);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:51:5: ( expression EOF )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:51:7: expression EOF
			{
			DebugLocation(51, 7);
			PushFollow(Follow._expression_in_statement312);
			expression1=expression();
			PopFollow();

			DebugLocation(51, 18);
			Match(input,EOF,Follow._EOF_in_statement314); 
			DebugLocation(51, 22);
			 Result = expression1; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
	    }
	 	DebugLocation(52, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}
	// $ANTLR start "expression"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:54:1: expression returns [Entity value] : s= sum_expression ;
	[GrammarRule("expression")]
	private Entity expression()
	{
		EnterRule_expression();
		EnterRule("expression", 2);
		TraceIn("expression", 2);
	    Entity value = default(Entity);


	    Entity s = default(Entity);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(54, 4);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:55:5: (s= sum_expression )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:55:7: s= sum_expression
			{
			DebugLocation(55, 9);
			PushFollow(Follow._sum_expression_in_expression340);
			s=sum_expression();
			PopFollow();

			DebugLocation(55, 26);
			 value = s; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 2);
			LeaveRule("expression", 2);
			LeaveRule_expression();
	    }
	 	DebugLocation(56, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return value;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_power_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_power_expression() {}
	// $ANTLR start "power_expression"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:58:1: power_expression returns [Entity value] : atom ( power_list )? ;
	[GrammarRule("power_expression")]
	private Entity power_expression()
	{
		EnterRule_power_expression();
		EnterRule("power_expression", 3);
		TraceIn("power_expression", 3);
	    Entity value = default(Entity);


	    Entity atom2 = default(Entity);
	    List<Entity> power_list3 = default(List<Entity>);

		try { DebugEnterRule(GrammarFileName, "power_expression");
		DebugLocation(58, 1);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:59:2: ( atom ( power_list )? )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:59:4: atom ( power_list )?
			{
			DebugLocation(59, 4);
			PushFollow(Follow._atom_in_power_expression363);
			atom2=atom();
			PopFollow();

			DebugLocation(59, 9);
			 value = atom2; 
			DebugLocation(59, 35);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:59:35: ( power_list )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_1 = input.LA(1);

			if ((LA1_1==17))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:59:36: power_list
				{
				DebugLocation(59, 36);
				PushFollow(Follow._power_list_in_power_expression368);
				power_list3=power_list();
				PopFollow();

				DebugLocation(59, 47);

						var list = power_list3;
						value = list.Last();
						list.RemoveAt(list.Count - 1);
						list.Reverse(); 
						list.Add(atom2);
						foreach(var p in list) { value = MathS.Pow(p, value); }
						

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("power_expression", 3);
			LeaveRule("power_expression", 3);
			LeaveRule_power_expression();
	    }
	 	DebugLocation(67, 1);
		} finally { DebugExitRule(GrammarFileName, "power_expression"); }
		return value;

	}
	// $ANTLR end "power_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_power_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_power_list() {}
	// $ANTLR start "power_list"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:69:1: power_list returns [List<Entity> value] : ( '^' atom )+ ;
	[GrammarRule("power_list")]
	private List<Entity> power_list()
	{
		EnterRule_power_list();
		EnterRule("power_list", 4);
		TraceIn("power_list", 4);
	    List<Entity> value = default(List<Entity>);


	    Entity atom4 = default(Entity);


	    		value = new List<Entity>();
	    	
		try { DebugEnterRule(GrammarFileName, "power_list");
		DebugLocation(69, 4);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:74:5: ( ( '^' atom )+ )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:74:7: ( '^' atom )+
			{
			DebugLocation(74, 7);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:74:7: ( '^' atom )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_1 = input.LA(1);

				if ((LA2_1==17))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:74:8: '^' atom
					{
					DebugLocation(74, 8);
					Match(input,17,Follow._17_in_power_list398); 
					DebugLocation(74, 12);
					PushFollow(Follow._atom_in_power_list400);
					atom4=atom();
					PopFollow();

					DebugLocation(74, 17);
					 value.Add(atom4); 

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("power_list", 4);
			LeaveRule("power_list", 4);
			LeaveRule_power_list();
	    }
	 	DebugLocation(75, 4);
		} finally { DebugExitRule(GrammarFileName, "power_list"); }
		return value;

	}
	// $ANTLR end "power_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unary_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unary_expression() {}
	// $ANTLR start "unary_expression"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:77:1: unary_expression returns [Entity value] : ( ( '-' p= power_expression | '+' p= power_expression ) |p= power_expression );
	[GrammarRule("unary_expression")]
	private Entity unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 5);
		TraceIn("unary_expression", 5);
	    Entity value = default(Entity);


	    Entity p = default(Entity);

		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(77, 4);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:78:5: ( ( '-' p= power_expression | '+' p= power_expression ) |p= power_expression )
			int alt4=2;
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_1 = input.LA(1);

			if ((LA4_1==13||LA4_1==15))
			{
				alt4 = 1;
			}
			else if ((LA4_1==ID||LA4_1==NUMBER||LA4_1==10))
			{
				alt4 = 2;
			}

			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:78:7: ( '-' p= power_expression | '+' p= power_expression )
				{
				DebugLocation(78, 7);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:78:7: ( '-' p= power_expression | '+' p= power_expression )
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==15))
				{
					alt3 = 1;
				}
				else if ((LA3_1==13))
				{
					alt3 = 2;
				}

				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:78:8: '-' p= power_expression
					{
					DebugLocation(78, 8);
					Match(input,15,Follow._15_in_unary_expression429); 
					DebugLocation(78, 14);
					PushFollow(Follow._power_expression_in_unary_expression435);
					p=power_expression();
					PopFollow();

					DebugLocation(78, 33);
					 value = -p; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:79:8: '+' p= power_expression
					{
					DebugLocation(79, 8);
					Match(input,13,Follow._13_in_unary_expression449); 
					DebugLocation(79, 14);
					PushFollow(Follow._power_expression_in_unary_expression455);
					p=power_expression();
					PopFollow();

					DebugLocation(79, 33);
					 value = p; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:80:7: p= power_expression
				{
				DebugLocation(80, 9);
				PushFollow(Follow._power_expression_in_unary_expression470);
				p=power_expression();
				PopFollow();

				DebugLocation(80, 28);
				 value = p; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unary_expression", 5);
			LeaveRule("unary_expression", 5);
			LeaveRule_unary_expression();
	    }
	 	DebugLocation(81, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return value;

	}
	// $ANTLR end "unary_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_mult_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_mult_expression() {}
	// $ANTLR start "mult_expression"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:83:1: mult_expression returns [Entity value] : u1= unary_expression ( '*' u2= unary_expression | '/' u2= unary_expression )* ;
	[GrammarRule("mult_expression")]
	private Entity mult_expression()
	{
		EnterRule_mult_expression();
		EnterRule("mult_expression", 6);
		TraceIn("mult_expression", 6);
	    Entity value = default(Entity);


	    Entity u1 = default(Entity);
	    Entity u2 = default(Entity);

		try { DebugEnterRule(GrammarFileName, "mult_expression");
		DebugLocation(83, 3);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:84:4: (u1= unary_expression ( '*' u2= unary_expression | '/' u2= unary_expression )* )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:84:6: u1= unary_expression ( '*' u2= unary_expression | '/' u2= unary_expression )*
			{
			DebugLocation(84, 9);
			PushFollow(Follow._unary_expression_in_mult_expression499);
			u1=unary_expression();
			PopFollow();

			DebugLocation(84, 28);
			 value = u1; 
			DebugLocation(85, 4);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:85:4: ( '*' u2= unary_expression | '/' u2= unary_expression )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if ((LA5_1==12))
				{
					alt5 = 1;
				}
				else if ((LA5_1==16))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:85:5: '*' u2= unary_expression
					{
					DebugLocation(85, 5);
					Match(input,12,Follow._12_in_mult_expression508); 
					DebugLocation(85, 12);
					PushFollow(Follow._unary_expression_in_mult_expression514);
					u2=unary_expression();
					PopFollow();

					DebugLocation(85, 31);
					 value = value * u2; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:86:5: '/' u2= unary_expression
					{
					DebugLocation(86, 5);
					Match(input,16,Follow._16_in_mult_expression525); 
					DebugLocation(86, 12);
					PushFollow(Follow._unary_expression_in_mult_expression531);
					u2=unary_expression();
					PopFollow();

					DebugLocation(86, 31);
					 value = value / u2; 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("mult_expression", 6);
			LeaveRule("mult_expression", 6);
			LeaveRule_mult_expression();
	    }
	 	DebugLocation(87, 3);
		} finally { DebugExitRule(GrammarFileName, "mult_expression"); }
		return value;

	}
	// $ANTLR end "mult_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_sum_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_sum_expression() {}
	// $ANTLR start "sum_expression"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:89:1: sum_expression returns [Entity value] : m1= mult_expression ( '+' m2= mult_expression | '-' m2= mult_expression )* ;
	[GrammarRule("sum_expression")]
	private Entity sum_expression()
	{
		EnterRule_sum_expression();
		EnterRule("sum_expression", 7);
		TraceIn("sum_expression", 7);
	    Entity value = default(Entity);


	    Entity m1 = default(Entity);
	    Entity m2 = default(Entity);

		try { DebugEnterRule(GrammarFileName, "sum_expression");
		DebugLocation(89, 3);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:90:4: (m1= mult_expression ( '+' m2= mult_expression | '-' m2= mult_expression )* )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:90:6: m1= mult_expression ( '+' m2= mult_expression | '-' m2= mult_expression )*
			{
			DebugLocation(90, 9);
			PushFollow(Follow._mult_expression_in_sum_expression560);
			m1=mult_expression();
			PopFollow();

			DebugLocation(90, 27);
			 value = m1; 
			DebugLocation(91, 4);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:91:4: ( '+' m2= mult_expression | '-' m2= mult_expression )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=3;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_1 = input.LA(1);

				if ((LA6_1==13))
				{
					alt6 = 1;
				}
				else if ((LA6_1==15))
				{
					alt6 = 2;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:91:5: '+' m2= mult_expression
					{
					DebugLocation(91, 5);
					Match(input,13,Follow._13_in_sum_expression568); 
					DebugLocation(91, 12);
					PushFollow(Follow._mult_expression_in_sum_expression574);
					m2=mult_expression();
					PopFollow();

					DebugLocation(91, 30);
					 value = value + m2; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:92:5: '-' m2= mult_expression
					{
					DebugLocation(92, 5);
					Match(input,15,Follow._15_in_sum_expression585); 
					DebugLocation(92, 12);
					PushFollow(Follow._mult_expression_in_sum_expression591);
					m2=mult_expression();
					PopFollow();

					DebugLocation(92, 30);
					 value = value - m2; 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("sum_expression", 7);
			LeaveRule("sum_expression", 7);
			LeaveRule_sum_expression();
	    }
	 	DebugLocation(93, 3);
		} finally { DebugExitRule(GrammarFileName, "sum_expression"); }
		return value;

	}
	// $ANTLR end "sum_expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_atom() {}
	// $ANTLR start "atom"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:95:1: atom returns [Entity value] : ( NUMBER | ID | '(' expression ')' | ID '(' args= function_arguments ')' | ID '(' ')' );
	[GrammarRule("atom")]
	private Entity atom()
	{
		EnterRule_atom();
		EnterRule("atom", 8);
		TraceIn("atom", 8);
	    Entity value = default(Entity);


	    IToken NUMBER5 = default(IToken);
	    IToken ID6 = default(IToken);
	    IToken ID8 = default(IToken);
	    IToken ID9 = default(IToken);
	    List<Entity> args = default(List<Entity>);
	    Entity expression7 = default(Entity);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(95, 4);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:96:5: ( NUMBER | ID | '(' expression ')' | ID '(' args= function_arguments ')' | ID '(' ')' )
			int alt7=5;
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt7 = 1;
				}
				break;
			case ID:
				{
				int LA7_2 = input.LA(2);

				if ((LA7_2==10))
				{
					int LA7_3 = input.LA(3);

					if ((LA7_3==11))
					{
						alt7 = 5;
					}
					else if ((LA7_3==ID||LA7_3==NUMBER||LA7_3==10||LA7_3==13||LA7_3==15))
					{
						alt7 = 4;
					}

					else
					{
						NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}

				}
				else if ((LA7_2==EOF||(LA7_2>=11 && LA7_2<=17)))
				{
					alt7 = 2;
				}

				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case 10:
				{
				alt7 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:96:7: NUMBER
				{
				DebugLocation(96, 7);
				NUMBER5=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom617); 
				DebugLocation(96, 14);
				 value = Number.Parse((NUMBER5!=null?NUMBER5.Text:default(string))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:97:7: ID
				{
				DebugLocation(97, 7);
				ID6=(IToken)Match(input,ID,Follow._ID_in_atom627); 
				DebugLocation(97, 10);
				 value = new VariableEntity((ID6!=null?ID6.Text:default(string))); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:98:7: '(' expression ')'
				{
				DebugLocation(98, 7);
				Match(input,10,Follow._10_in_atom637); 
				DebugLocation(98, 11);
				PushFollow(Follow._expression_in_atom639);
				expression7=expression();
				PopFollow();

				DebugLocation(98, 22);
				Match(input,11,Follow._11_in_atom641); 
				DebugLocation(98, 26);
				 value = expression7; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:99:7: ID '(' args= function_arguments ')'
				{
				DebugLocation(99, 7);
				ID8=(IToken)Match(input,ID,Follow._ID_in_atom651); 
				DebugLocation(99, 10);
				Match(input,10,Follow._10_in_atom653); 
				DebugLocation(99, 19);
				PushFollow(Follow._function_arguments_in_atom659);
				args=function_arguments();
				PopFollow();

				DebugLocation(99, 40);
				Match(input,11,Follow._11_in_atom661); 
				DebugLocation(99, 44);
				 value = new FunctionEntity((ID8!=null?ID8.Text:default(string)) + 'f'); foreach(var arg in args) { value.Children.Add(arg); } 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:100:7: ID '(' ')'
				{
				DebugLocation(100, 7);
				ID9=(IToken)Match(input,ID,Follow._ID_in_atom671); 
				DebugLocation(100, 10);
				Match(input,10,Follow._10_in_atom673); 
				DebugLocation(100, 14);
				Match(input,11,Follow._11_in_atom675); 
				DebugLocation(100, 18);
				 value = new FunctionEntity((ID9!=null?ID9.Text:default(string)) + 'f'); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 8);
			LeaveRule("atom", 8);
			LeaveRule_atom();
	    }
	 	DebugLocation(101, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_function_arguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_function_arguments() {}
	// $ANTLR start "function_arguments"
	// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:103:1: function_arguments returns [List<Entity> list] : e= expression ( ',' e= expression )* ;
	[GrammarRule("function_arguments")]
	private List<Entity> function_arguments()
	{
		EnterRule_function_arguments();
		EnterRule("function_arguments", 9);
		TraceIn("function_arguments", 9);
	    List<Entity> list = default(List<Entity>);


	    Entity e = default(Entity);


	    		list = new List<Entity>();
	    	
		try { DebugEnterRule(GrammarFileName, "function_arguments");
		DebugLocation(103, 4);
		try
		{
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:108:5: (e= expression ( ',' e= expression )* )
			DebugEnterAlt(1);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:108:7: e= expression ( ',' e= expression )*
			{
			DebugLocation(108, 9);
			PushFollow(Follow._expression_in_function_arguments708);
			e=expression();
			PopFollow();

			DebugLocation(108, 22);
			 list.Add(e); 
			DebugLocation(108, 47);
			// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:108:47: ( ',' e= expression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_1 = input.LA(1);

				if ((LA8_1==14))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\Angourimath\\AngouriMath\\Core\\FromString\\Antlr\\Angourimath.g:108:48: ',' e= expression
					{
					DebugLocation(108, 48);
					Match(input,14,Follow._14_in_function_arguments713); 
					DebugLocation(108, 54);
					PushFollow(Follow._expression_in_function_arguments719);
					e=expression();
					PopFollow();

					DebugLocation(108, 67);
					 list.Add(e); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_arguments", 9);
			LeaveRule("function_arguments", 9);
			LeaveRule_function_arguments();
	    }
	 	DebugLocation(109, 4);
		} finally { DebugExitRule(GrammarFileName, "function_arguments"); }
		return list;

	}
	// $ANTLR end "function_arguments"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _expression_in_statement312 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_statement314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sum_expression_in_expression340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_power_expression363 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _power_list_in_power_expression368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _17_in_power_list398 = new BitSet(new ulong[]{0x540UL});
		public static readonly BitSet _atom_in_power_list400 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _15_in_unary_expression429 = new BitSet(new ulong[]{0x540UL});
		public static readonly BitSet _power_expression_in_unary_expression435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_unary_expression449 = new BitSet(new ulong[]{0x540UL});
		public static readonly BitSet _power_expression_in_unary_expression455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _power_expression_in_unary_expression470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_mult_expression499 = new BitSet(new ulong[]{0x11002UL});
		public static readonly BitSet _12_in_mult_expression508 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _unary_expression_in_mult_expression514 = new BitSet(new ulong[]{0x11002UL});
		public static readonly BitSet _16_in_mult_expression525 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _unary_expression_in_mult_expression531 = new BitSet(new ulong[]{0x11002UL});
		public static readonly BitSet _mult_expression_in_sum_expression560 = new BitSet(new ulong[]{0xA002UL});
		public static readonly BitSet _13_in_sum_expression568 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _mult_expression_in_sum_expression574 = new BitSet(new ulong[]{0xA002UL});
		public static readonly BitSet _15_in_sum_expression585 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _mult_expression_in_sum_expression591 = new BitSet(new ulong[]{0xA002UL});
		public static readonly BitSet _NUMBER_in_atom617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _10_in_atom637 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _expression_in_atom639 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_atom641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom651 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _10_in_atom653 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _function_arguments_in_atom659 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_atom661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom671 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _10_in_atom673 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_atom675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_function_arguments708 = new BitSet(new ulong[]{0x4002UL});
		public static readonly BitSet _14_in_function_arguments713 = new BitSet(new ulong[]{0xA540UL});
		public static readonly BitSet _expression_in_function_arguments719 = new BitSet(new ulong[]{0x4002UL});
	}
	#endregion Follow sets
}

} // namespace  Antlr 
