using AngouriMath.Core.Exceptions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Numerics;
using System.Text;
using static AngouriMath.Entity;

namespace AngouriMath.Core.Compilation.IntoLinq
{
    partial record CompilationProtocol
    {
        internal static CompilationProtocol Assume()
            => Create<Complex>();

        internal static CompilationProtocol Assume<T1>()
            => numericTypes.Contains(typeof(T1)) ? Create<T1>() : Assume();

        <# for (var i = 2; i <= 9; i++) { #>

        internal static CompilationProtocol Assume<T1<# for(var t=2;t<=i;t++){ #>, T<#= t #><# } #>>()
            => numericTypes.Contains(typeof(T1)) ? Create<T1>() : Assume<T2<# for(var t=3;t<=i;t++){ #>, T<#= t #><# } #>>();

        <# } #>

    }
}